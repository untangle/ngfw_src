diff -urN jabsorb-1.2.2.orig/build.xml jabsorb-1.2.2/build.xml
--- jabsorb-1.2.2.orig/build.xml	2017-03-15 15:15:58.287643239 -0700
+++ jabsorb-1.2.2/build.xml	2017-03-15 15:16:18.826619969 -0700
@@ -53,13 +53,14 @@
   </target>
 
   <target name="compile" depends="init,init-build" description="Compiles the source into the build directory">
-    <javac debug="true" source="1.4" srcdir="${src}" destdir="${build}">
+    <javac debug="true" source="1.6" srcdir="${src}" destdir="${build}">
       <classpath refid="default-classpath" />
     </javac>
   </target>
 
   <target name="dist" depends="compile,compress-web-content,init-build" description="Puts the compiled source into a jar">
-    <jar destfile="${app-jar}" basedir="${build}" excludes="*~" />
+    <jar destfile="${app-jar}" basedir="${build}" excludes="*~" includes="org/jabsorb/**/*.class"/>
+    <jar destfile="json.jar" basedir="${build}" excludes="*~" includes="org/json/**/*.class"/>
   </target>
 
   <target name="test.init" depends="init" description="Makes directories needed for the test jsps">
@@ -69,7 +70,7 @@
   </target>
 
   <target name="compile.test" depends="test.init, dist, init" description="Compiles the testing classes">
-    <javac debug="true" source="1.4" srcdir="${test.src}" destdir="${test.classes}">
+    <javac debug="true" source="1.6" srcdir="${test.src}" destdir="${test.classes}">
       <classpath>
       	<path refid="jarClasspath" />
         <fileset dir="${lib-test}">
@@ -146,6 +147,7 @@
   <target name="clean" depends="init" description="Cleans all files produced by ant">
     <delete file="${app-war}" />
     <delete file="${app-jar}" />
+    <delete file="json.jar"/>
     <delete file="${webapp}/WEB-INF/web.xml.out" />
     <delete file="${webapp}/WEB-INF/web.xml.generated" />
     <delete file="${webapp}/Test.java.txt" />
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/JSONRPCBridge.java jabsorb-1.2.2/src/org/jabsorb/JSONRPCBridge.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/JSONRPCBridge.java	2017-03-15 15:15:58.284643097 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/JSONRPCBridge.java	2017-03-15 15:16:18.827620045 -0700
@@ -108,8 +108,20 @@
  * <code>JSONRPCBridge.getGlobalBridge().registerClass("MyClass",
  * com.example.MyClass.class);</code>
  */
-public class JSONRPCBridge implements Serializable
+public class JSONRPCBridge
 {
+    public JSONRPCBridge()
+    {
+        try {
+            ser.registerDefaultSerializers();
+
+            this.nonce = new java.math.BigInteger(130, new java.security.SecureRandom()).toString(32);
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
 
   /**
    * Used to determine whether two methods match
@@ -208,11 +220,6 @@
   }
 
   /**
-   * Unique serialisation id. 
-   */
-  private final static long serialVersionUID = 2;
-
-  /**
    * A simple transformer that makes no change
    */
   private static final ExceptionTransformer IDENTITY_EXCEPTION_TRANSFORMER = new ExceptionTransformer()
@@ -242,18 +249,10 @@
   /**
    * Global JSONSerializer instance
    */
-  private static JSONSerializer ser = new JSONSerializer();
+  private JSONSerializer ser = new JSONSerializer();
 
   static
   {
-    try
-    {
-      ser.registerDefaultSerializers();
-    }
-    catch (Exception e)
-    {
-      e.printStackTrace();
-    }
   }
 
   /**
@@ -269,11 +268,11 @@
   }
 
   /**
-   * Get the global JSONSerializer object.
+   * Get the JSONSerializer object.
    * 
    * @return the global JSONSerializer object.
    */
-  public static JSONSerializer getSerializer()
+  public JSONSerializer getSerializer()
   {
     return ser;
   }
@@ -299,13 +298,13 @@
   }
 
   /**
-   * Set the global JSONSerializer object.
+   * Set the JSONSerializer object.
    * 
-   * @param ser the global JSONSerializer object.
+   * @param ser the JSONSerializer object.
    */
-  public static void setSerializer(JSONSerializer ser)
+  public void setSerializer(JSONSerializer newValue)
   {
-    JSONRPCBridge.ser = ser;
+      this.ser = newValue;
   }
 
   /* Implementation */
@@ -433,6 +432,11 @@
   private CallbackController cbc = null;
 
   /**
+   * The security nonce
+   */
+  private String nonce = null;
+    
+  /**
    * Call a method using a JSON-RPC request object.
    * 
    * @param context The transport context (the HttpServletRequest object in the
@@ -444,10 +448,14 @@
   public JSONRPCResult call(Object context[], JSONObject jsonReq)
   {
     String encodedMethod;
+    String nonce = null;
     Object requestId;
     JSONArray arguments;
     JSONArray fixups;
 
+    try { nonce = jsonReq.getString("nonce"); }
+    catch (JSONException e) { }
+    
     try
     {
       // Get method name, arguments and request id
@@ -565,6 +573,10 @@
         }
         return new JSONRPCResult(JSONRPCResult.CODE_SUCCESS, requestId, methods);
       }
+      if (encodedMethod.equals("system.getNonce"))
+      {
+        return new JSONRPCResult(JSONRPCResult.CODE_SUCCESS, requestId, this.nonce);
+      }
       // Look up the class, object instance and method objects
       if (className == null
           || methodName == null
@@ -616,6 +628,10 @@
       }
     }
 
+    if ( ! this.nonce.equals( nonce ) ) {
+        return new JSONRPCResult(595, requestId, "Invalid security nonce");
+    }
+    
     // Find the specific method
     if ((method = resolveMethod(methodMap, methodName, arguments)) == null)
     {
@@ -645,7 +661,6 @@
           cbc.preInvokeCallback(context[i], itsThis, method, javaArgs);
         }
       }
-
       // Invoke the method
       Object returnObj = method.invoke(itsThis, javaArgs);
 
@@ -677,6 +692,9 @@
         }
       }
       log.error("exception occured",e);
+      for ( Throwable cause = e.getCause() ; cause != null ; cause = cause.getCause() ) {
+          log.error("exception cause: ", cause);
+      }
       result = new JSONRPCResult(JSONRPCResult.CODE_ERR_UNMARSHALL, requestId,
           e.getMessage());
     }
@@ -690,6 +708,9 @@
         }
       }
       log.error("exception occured",e);
+      for ( Throwable cause = e.getCause() ; cause != null ; cause = cause.getCause() ) {
+          log.error("exception cause: ", cause);
+      }
       result = new JSONRPCResult(JSONRPCResult.CODE_ERR_MARSHALL, requestId, e
           .getMessage());
     }
@@ -707,6 +728,9 @@
         }
       }
       log.error("exception occured",e);
+      for ( Throwable cause = e.getCause() ; cause != null ; cause = cause.getCause() ) {
+          log.error("exception cause: ", cause);
+      }
       result = new JSONRPCResult(JSONRPCResult.CODE_REMOTE_EXCEPTION,
           requestId, exceptionTransformer.transform(e));
     }
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/JSONSerializer.java jabsorb-1.2.2/src/org/jabsorb/JSONSerializer.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/JSONSerializer.java	2017-03-15 15:15:58.284643097 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/JSONSerializer.java	2017-03-15 15:17:07.683943845 -0700
@@ -718,7 +718,12 @@
       try
       {
         className = ((JSONObject) o).getString("javaClass");
-        return Class.forName(className);
+        // conversion of old class paths to new class paths //v13
+        if ( className.startsWith("com.untangle.node") )
+            className = className.replaceFirst("com.untangle.node","com.untangle.app");
+        if ( className.startsWith("com.untangle.uvm.node") )
+            className = className.replaceFirst("com.untangle.uvm.node","com.untangle.uvm.app");
+        return Class.forName(className,true,Thread.currentThread().getContextClassLoader());
       }
       catch (Exception e)
       {
@@ -746,9 +750,9 @@
       {
         if (compClazz.isArray())
         {
-          return Class.forName("[" + compClazz.getName());
+            return Class.forName("[" + compClazz.getName(),true,Thread.currentThread().getContextClassLoader());
         }
-        return Class.forName("[L" + compClazz.getName() + ";");
+        return Class.forName("[L" + compClazz.getName() + ";",true,Thread.currentThread().getContextClassLoader());
       }
       catch (ClassNotFoundException e)
       {
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/reflect/ClassAnalyzer.java jabsorb-1.2.2/src/org/jabsorb/reflect/ClassAnalyzer.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/reflect/ClassAnalyzer.java	2017-03-15 15:15:58.282643002 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/reflect/ClassAnalyzer.java	2017-03-15 15:16:18.828620114 -0700
@@ -107,6 +107,15 @@
   {
     log.info("analyzing " + clazz.getName());
     Method methods[] = clazz.getMethods();
+    // java7 does not return a fixed order from getMethods which leads to inconsistent behavior
+    // sort methods by signature to ensure consitent order and method resolution
+    java.util.Arrays.sort( methods, new java.util.Comparator() {
+            public int compare(Object o1, Object o2) {
+                String x1 = ((Method) o1).toGenericString();
+                String x2 = ((Method) o2).toGenericString();
+                return x1.compareTo(x2);
+            }
+        });
     ClassData cd = new ClassData();
     cd.clazz = clazz;
 
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/serializer/impl/BooleanSerializer.java jabsorb-1.2.2/src/org/jabsorb/serializer/impl/BooleanSerializer.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/serializer/impl/BooleanSerializer.java	2017-03-15 15:15:58.283643050 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/serializer/impl/BooleanSerializer.java	2017-03-15 15:16:18.828620114 -0700
@@ -97,6 +97,11 @@
     {
       returnValue = (Boolean) jso;
     }
+    else if (clazz == Boolean.class)
+    {
+      returnValue = (Boolean)jso;
+    }
+
 
     state.setSerialized(jso, returnValue);
     return returnValue;
diff -urN jabsorb-1.2.2.orig/src/org/jabsorb/serializer/ObjectMatch.java jabsorb-1.2.2/src/org/jabsorb/serializer/ObjectMatch.java
--- jabsorb-1.2.2.orig/src/org/jabsorb/serializer/ObjectMatch.java	2017-03-15 15:15:58.283643050 -0700
+++ jabsorb-1.2.2/src/org/jabsorb/serializer/ObjectMatch.java	2017-03-15 15:16:18.828620114 -0700
@@ -102,6 +102,10 @@
    */
   public ObjectMatch max(ObjectMatch m)
   {
+      if (m == null)
+          {
+              return this;
+          }
     if (this.mismatch > m.mismatch)
     {
       return this;
diff -urN jabsorb-1.2.2.orig/webapps/jsonrpc/jsonrpc.js jabsorb-1.2.2/webapps/jsonrpc/jsonrpc.js
--- jabsorb-1.2.2.orig/webapps/jsonrpc/jsonrpc.js	2017-03-15 15:15:58.287643239 -0700
+++ jabsorb-1.2.2/webapps/jsonrpc/jsonrpc.js	2017-03-15 15:16:18.829620181 -0700
@@ -24,6 +24,8 @@
  *
  */
 
+var nonce = "";
+
 /* escape a character */
 
 var escapeJSONChar=function ()
@@ -385,11 +387,15 @@
       this._addMethods(["listMethods"],this.javaClass);
       req = this._makeRequest("listMethods", []);
     }
-    //If it is the bridge get the bridge's methods
+    //If it is the bridge get the bridge's methods and nonce
     else
     {
       this._addMethods(["system.listMethods"],this.javaClass);
       req = this._makeRequest("system.listMethods", []);
+
+        var nonceReq = this._makeRequest("system.getNonce", []);
+        nonceReq.cb = function (result, e) { nonce = result; };
+        this._sendRequest( nonceReq );
     }
 
     // If the constructor has an async callback we add a wrapper
@@ -719,7 +725,7 @@
   req.client = this;
   req.requestId = JSONRpcClient.requestId++;
 
-  var obj = "{\"id\":"+req.requestId+",\"method\":";
+  var obj = "{\"id\":"+req.requestId+",\"nonce\":\""+nonce+"\",\"method\":";
 
   if (this.objectID)
   {
