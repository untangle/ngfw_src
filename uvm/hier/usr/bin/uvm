#!/usr/bin/python
import sys
import os
import resource
import glob
import time
import threading
import signal
import datetime
import getopt
import re
import subprocess
import syslog
import platform

# read the configuration
exec(open("@PREFIX@/usr/share/untangle/conf/untangle-vm.conf"));

#p = subprocess.Popen(['/usr/bin/logger','-t','uvmconsole'],stdin=subprocess.PIPE)
#os.dup2(p.stdin.fileno(), sys.stdout.fileno())
#os.dup2(p.stdin.fileno(), sys.stderr.fileno())

if "@PREFIX@x" == "x":
    productionEnv = True;
    developmentEnv = False;
else:
    developmentEnv = True;
    productionEnv = False;

global exit_flag;
global uvm_pid;
global monitor_interval_seconds;
global syslog_out;

exit_flag = 0;
uvm_pid = 0;
monitor_interval_seconds=10;
syslog_out = syslog.openlog("uvmwrapper");
use_valgrind = False
use_leakdetect = False

def debug(string):
    print string
    sys.stdout.flush()
    syslog.syslog(string);
    
class ArgumentParser(object):
    def __init__(self):
        pass

    def set_valgrind( self, arg ):
        global use_valgrind
        use_valgrind = True

    def set_leakdetect( self, arg ):
        global use_leakdetect
        use_leakdetect = True


    def parse_args( self ):
        handlers = {
            '-v' : self.set_valgrind,
            '-l' : self.set_leakdetect,
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'vl')
            for opt in optlist:
                handlers[opt[0]](opt[1])
            return args
        except getopt.GetoptError, exc:
            print exc
            printUsage()
            exit(1)

def printUsage():
    sys.stderr.write( """\
%s Usage:
  required args:
  optional args:
    -v                   : use valgrind
    -l                   : use leak detection (with valgrind)
""" % (sys.argv[0]) )
    sys.exit(1)

parser = ArgumentParser()
parser.parse_args()

#
# Set the process name
#
def set_proc_name(newname):
    from ctypes import cdll, byref, create_string_buffer
    libc = cdll.LoadLibrary('libc.so.6')
    buff = create_string_buffer(len(newname)+1)
    buff.value = newname
    libc.prctl(15, byref(buff), 0, 0, 0)


#
# Flushes the UDP conntrack
# We need to do this to handle sessions that were initiated before Untangle started
# This will flush them so they will be recreated with the proper settings using WAN Balancer etc
#
def flushConntrack():
    # debug("flushConntrack()")
    os.system('conntrack -D --proto udp >/dev/null 2>&1');

#
# Cleanup tmp files
# Currently this just deletes all zero-length tomcat files
# Occasionally tomcat leaves a zero length file in place and it must be removed
# before it will regenerate the proper class/java file
#
def cleanupTmpFiles():
    # debug("flushConntrack()")
    os.system('find @PREFIX@/var/lib/uvm/work -type f -size 0 -exec rm -f {} \; 2>&1');

#
# If the UVM is running this inserts the necessary iptables to capture traffic
# If the UVM is not running this removes the iptables rules to capture traffic
#
def resetIptables():
    # debug("Resetting iptables rules..."
    os.system('@PREFIX@/usr/share/untangle/bin/ut-uvm-update-rules.sh'); 

#
# Make special changes for the dev environment
#
def devEnvSetup():
    # if its not a symlink, move it to a backup just in case
    os.system('if [ ! -L /usr/share/untangle/bin ] ; then mv /usr/share/untangle/bin /usr/share/untangle/bin.backup ; fi');
    # remove old symlink if still there, and add new symlink
    os.system('rm -rf /usr/share/untangle/bin');
    os.system('ln -s @PREFIX@/usr/share/untangle/bin /usr/share/untangle/bin');

#
# Undo the dev environment changes made earlier
#
def devEnvRestoreSystem():
    os.system('if [ -L /usr/share/untangle/bin ] && [ -d /usr/share/untangle/bin.backup ] ; then rm -f /usr/share/untangle/bin && mv /usr/share/untangle/bin.backup /usr/share/untangle/bin ; fi');
    os.system('rm -f /etc/apache2/uvm-dev.conf');

#
# This prepares the system for a running untangle-vm
# It loads the appropriate kernel modules, sets proc values, and other required system settings
#
def prepareSystem():
    # if development environment change /usr/share/untangle/settings to point to dev env settings
    if developmentEnv:
        devEnvSetup()

    # load nfnetlink_queue (if not already loaded)
    os.system('/sbin/modprobe -q nfnetlink_queue');

    # remove ip_queue (if not already removed)
    os.system('/sbin/modprobe -q -r ip_queue');

    # Not Optional proc settings
    procset('/proc/sys/net/ipv4/ip_forward',"1",False);
    procset('/proc/sys/net/ipv4/ip_nonlocal_bind',"1",False);
    procset('/proc/sys/net/ipv4/ip_local_port_range',"3200   8999",False);
    procset('/proc/sys/net/ipv4/ip_local_reserved_ports',"4500,8009,8123,5432,8484",False); # charon, tomcat, classd, postgress, bcid
    # Check for old location, if its not there assume new location (4.9+)
    if os.path.exists('/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_loose'):
        procset('/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_loose',"0",False);
    else:
        procset('/proc/sys/net/netfilter/nf_conntrack_tcp_loose',"0",False);
    procset('/proc/sys/vm/max_map_count',"262144",False);
    # procset('/proc/sys/kernel/threads-max',"1048576",False); # default is pages/4 which is ideal - do not override
    # procset('/proc/sys/fs/file-max',"1642108",False); # default is 10% of memory which is ideal - do not override

    # Optional proc settings
    if platform.machine() == 'x86_64':
        procset('/proc/sys/kernel/pid_max',"131072",True);
    procset('/proc/sys/net/netfilter/nf_conntrack_udp_timeout_stream',"180",True)
    procset('/proc/sys/net/netfilter/nf_conntrack_udp_timeout',"70",True);
    procset('/proc/sys/net/ipv4/tcp_synack_retries',"0",True);
    procset('/proc/sys/net/ipv4/tcp_syncookies',"1",True);
    procset('/proc/sys/net/core/rmem_max','1048576',True); # needed for larger buffers for classd 
    procset('/proc/sys/net/core/wmem_max','1048576',True); # needed for larger buffers for classd 
    procset('/proc/sys/net/ipv4/neigh/default/gc_thresh1','4096',True); # adjust max arp entry (bug #10327)
    procset('/proc/sys/net/ipv4/neigh/default/gc_thresh2','8192',True); # adjust max arp entry (bug #10327)
    procset('/proc/sys/net/ipv4/neigh/default/gc_thresh3','8192',True); # adjust max arp entry (bug #10327)
    procset('/proc/sys/net/core/xfrm_larval_drop','1',True); # make sure nonblock-sockets do not block on IPsec  (bug #10890)
    procset('/proc/sys/net/netfilter/nf_conntrack_acct','1',True); # enable nfconntrack accounting for bypassed byte accounting
    procset('/proc/sys/net/netfilter/nf_conntrack_timestamp','1',True); # enable nfconntrack timestamping tracking (start and end session times)

    # The following settings check for the old location, if the old location does not exist, assume new location
    if os.path.exists('/proc/sys/net/ipv4/netfilter/ip_conntrack_max'):
        procset('/proc/sys/net/ipv4/netfilter/ip_conntrack_max',"131072",True)
    else:
        # DO NOT set  /proc/sys/net/netfilter/nf_conntrack_max
        # instead set /proc/sys/net/nf_conntrack_max
        # in the 4.9 kernel the former seems to cause major problems
        # and sets the max size of the conntrack table at 0
        procset('/proc/sys/net/nf_conntrack_max',"131072",True)
    # need to stay around for at least 60 seconds for conntrack monitor
    if os.path.exists('/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_time_wait'):
        procset('/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_time_wait',"60",True);
    else:
        procset('/proc/sys/net/netfilter/nf_conntrack_tcp_timeout_time_wait',"60",True);
    # need to stay around for at least 60 seconds for conntrack monitor
    if os.path.exists('/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_close'):
        procset('/proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_close',"60",True);
    else:
        procset('/proc/sys/net/netfilter/nf_conntrack_tcp_timeout_close',"60",True);
    if os.path.exists('/proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout'):
        procset('/proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout',"70",True);
    else:
        procset('/proc/sys/net/netfilter/nf_conntrack_udp_timeout',"70",True);
    if os.path.exists('/proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout_stream'):
        procset('/proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout_stream',"180",True)
    else:
        procset('/proc/sys/net/netfilter/nf_conntrack_udp_timeout_stream',"180",True)

    # setup environment variables

    # must set lang to ensure proper handling of i18n characters in JSON serialization (bug #10609)
    os.environ['LANG'] = "en_US.UTF-8"
    
    # build classpath
    os.environ['CLASSPATH'] = ""
    os.environ['CLASSPATH'] += "@PREFIX@/usr/share/untangle/conf:@PREFIX@/usr/share/untangle/lib/untangle-libuvm-bootstrap/:"
    for jarfile in glob.glob( os.path.join('@PREFIX@/usr/share/java/uvm', '*.jar') ):
        # debug("Adding jarfile: %s"%jarfile)
        os.environ['CLASSPATH'] += jarfile + ":"

    os.unsetenv('DISPLAY');

    # do not limit core size
    resource.setrlimit(resource.RLIMIT_CORE, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))

    # raise the FD limit, we do this incrementally so it automatically sets it 
    # to some large accepted value
    fdlimit=1024
    for i in range(13):
        try:
            #debug("setting fd limit: %i" % fdlimit)
            resource.setrlimit(resource.RLIMIT_NOFILE, (fdlimit, fdlimit))
            fdlimit = fdlimit * 2;
        except ValueError:
            #debug("Reached limit: %i" % fdlimit)
            break;



#
# This checks to verify that the system looks appropriate for running the untangle-vm
# If the system configuration is not correct, it will print an error and exit with 1 as a exit code
#
def checkSystem():
    #debug("checkSystem()")

    # check tune is loaded
    ret = os.system('/sbin/modprobe -q iptable_tune || /bin/lsmod | grep -q iptable_tune');
    if ret != 0:
        debug("ERROR: Incompatible kernel detected (no tune)");
        sys.exit(1);

    # check nfnetlink_queue is loaded
    if not os.path.exists("/proc/net/netfilter/nfnetlink_queue"):
        debug("ERROR: Incompatible kernel detected (no nfnetlink)"); 
        sys.exit(1);

    # check nfnetlink_queue owner
    p = os.popen("awk -v queue=0 '{ if ( $1 == queue ) print $2 }' /proc/net/netfilter/nfnetlink_queue");
    queue_owner = p.readline()
    p.close
    if not queue_owner == "":
        debug("ERROR: nfnetlink queue owned by another process: %s" % queue_owner);
        sys.exit(1);

    # also check that there is no ip_queue.  2.6.24 can't handle.
    if os.path.exists("/proc/net/ip_queue"):
        debug("ERROR: Incompatible kernel (incompatible ip_queue module loaded)");
        sys.exit(1);

#
# Utility for setting values in proc files
#
def procset(procfile, value, optional):
    #debug("procset(%s,%s,%s)" % (procfile, value, optional));
    if not os.path.exists(procfile):
        debug("ERROR: procfile %s not found" % procfile);
        if not optional:
            sys.exit(1);
        return;

    try:
        file = open(procfile,'w');
        file.write(value);
        file.close();
    except IOError:
        debug("ERROR: setting procfile %s to %s" % (procfile, value));
        if not optional:
            sys.exit(1);

# 
# This function monitors the running UVM to make sure it is within operating specs
# If it appears messed up it will kill it so the other thread will restart a functioning UVM
#
def monitor_uvm(pid):
    debug("untangle-vm monitoring (pid: %i)" % pid);

    while True:
        time.sleep(monitor_interval_seconds)
        
        if not os.path.exists("/proc/%i" % pid): 
            debug("untangle-vm not found (pid: %i), monitoring stopped" % pid);
            return;

        if needToRestart(pid):
            debug("*** Killing untangle-vm(%i)." % pid);
            os.system("kill %i" % pid);
            os.system("pkill -f com.untangle.uvm.Main");
            # wait for shutdown
            time.sleep(10)
            # check if proc is still alive
            try:
                os.kill(pid, 0)
            except OSError:
                # proc is dead
                debug("*** Killed untangle-vm(%i)." % pid);
                return
            else:
                # proc is still alive
                debug("*** Killing -9 untangle-vm(%i)." % pid);
                os.system("kill -9 %i" % pid);
                
    return;

# Return True if we need to kill the UVM
# this happens when the UVM is "out-of-spec" and it is determined that killing it
# and letting it restart is better than continuing in the current state
def needToRestart(pid): 
    
    # If the untangle-vm is having frequent CMF GC failures, kill it
    p = os.popen('tail -100 %s | grep -ci "concurrent mode failure"' % uvm_gc_log);
    output = p.readline().rstrip();
    cmf_count = int(output);
    if (cmf_count > 4):
        debug("*** Frequent CMF failures (%i)" % (cmf_count));
        return True;

    # If the untangle-vm garbage collection failed, kill it
    p = os.popen('tail -50 %s | grep -ci "promotion failed"' % uvm_gc_log);
    output = p.readline().rstrip();
    promo_count = int(output);
    if (promo_count > 2):
        debug("*** Promotion failures (%i)" % promo_count);
        return True;

    # If console log contains a fatal error
    p = os.popen('tail -50 %s | grep -ci "FATAL ERROR:"' % uvm_console_log);
    output = p.readline().rstrip();
    fatal_count = int(output);
    if (fatal_count >= 1):
        debug("*** Fatal Error in console.log (%i)" % (fatal_count));
        return True;

    # check Tomcat port is correct (8009 is correct, 8010-8019 is NOT correct)
    p = os.popen('tail -150 %s | grep -i "ajp13 listening on /127.0.0.1:801[0-9]"' % uvm_uvm_log);
    output = p.readline();
    if not (output == ""):
        debug("*** Tomcat bound to wrong port: %s " % output.rstrip());
        return True;

    return False;

#
# SIGINT handler 
# Sets the cleanup flag and sends the signal to the untangle-vm
#
def sigINThandler(signal, frame):
    global exit_flag;
    debug("Caught SIGINT: initiating shutdown (pid: %i)" % uvm_pid);
    exit_flag = 1;
    if not uvm_pid == 0:
        os.kill(uvm_pid, signal);
        os.system("pkill -%s -f com.untangle.uvm.Main" % str(signal));

#
# SIGTERM handler 
# Sets the cleanup flag and sends the signal to the untangle-vm
#
def sigTERMhandler(signal, frame):
    global exit_flag;
    debug("Caught SIGTERM: initiating shutdown (pid: %i)" % uvm_pid);
    exit_flag = 1;
    if not uvm_pid == 0:
        os.kill(uvm_pid, signal);
        os.system("pkill -%s -f com.untangle.uvm.Main" % str(signal));

#
# SIGARB handler 
# Sets the cleanup flag and sends the signal to the untangle-vm
#
def sigABRThandler(signal, frame):
    global exit_flag;
    debug("Caught SIGABRT: initiating shutdown (pid: %i)" % uvm_pid);
    exit_flag = 1;
    if not uvm_pid == 0:
        os.kill(uvm_pid, signal);
        os.system("pkill -%s -f com.untangle.uvm.Main" % str(signal));


##############################################################
##############################################################
##############################################################


set_proc_name("uvm");

prepareSystem();

checkSystem();

signal.signal( signal.SIGINT , sigINThandler );
signal.signal( signal.SIGTERM , sigTERMhandler );
signal.signal( signal.SIGABRT , sigABRThandler );

# loop infinitely (until a signal is received)
while True:
    debug("==============================");
    debug("       UVM Launching");
    debug("==============================");

    with open('/var/run/uvm.status', 'w+') as status_file:
        status_file.write('launching\n')

    cleanupTmpFiles();
    flushConntrack();

    if exit_flag == 1:
        if developmentEnv:
            devEnvRestoreSystem()
        sys.exit(0);

    pid, exfd = os.forkpty(); # must use forkpty to avoid signals to children
    if pid == 0:
        # child
        signal.signal( signal.SIGINT , signal.SIG_DFL );
        signal.signal( signal.SIGTERM , signal.SIG_DFL );
        signal.signal( signal.SIGABRT , signal.SIG_DFL );

        #so = se = open("/var/log/uvm/console.log", 'w', 0)
        #sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
        #os.dup2(so.fileno(), sys.stdout.fileno())
        #os.dup2(se.fileno(), sys.stderr.fileno())
        
        p = subprocess.Popen(['/usr/bin/logger','-t','uvmconsole'],stdin=subprocess.PIPE)
        os.dup2(p.stdin.fileno(), sys.stdout.fileno())
        os.dup2(p.stdin.fileno(), sys.stderr.fileno())

        if use_valgrind:
            valgrind_cmd = "/usr/bin/valgrind --num-callers=50 --trace-children=no --smc-check=all --error-limit=no --gen-suppressions=all --suppressions=@PREFIX@/usr/share/untangle/conf/valgrind.supp "
            # valgrind_cmd = "/usr/bin/valgrind --num-callers=50 --trace-children=no --smc-check=all --error-limit=no --suppressions=@PREFIX@/usr/share/untangle/conf/valgrind.supp "
            if use_leakdetect:
                valgrind_cmd = valgrind_cmd + "--leak-check=full "
            args = re.findall("(?:\'.*?\'|\S)+",
                    valgrind_cmd +
                    "/usr/bin/java " +
                    java_opts + " " + uvm_args +
                    " -XX:UseSSE=0 " + " -Djava.compiler=NONE "
                    " com.untangle.uvm.Main")
            os.execv("/usr/bin/valgrind", args);
        else:
            args = re.findall("(?:\'.*?\'|\S)+",
                    "/usr/bin/java " +
                    java_opts + " " + uvm_args +
                    " com.untangle.uvm.Main")
            os.execv("/usr/bin/java", args);

        debug("ERROR: execv returned");
        #never returns;
    
    # parent
    uvm_pid = pid;        
    debug("untangle-vm launched (pid: %i)" % uvm_pid);

    # write the java pid file
    with open('/var/run/uvm-java.pid','w') as pid_file:
        pid_file.write(str(uvm_pid)+"\n");

    # adjust oom value to that the kernel will kill java when out of memory
    procset('/proc/%i/oom_adj'%uvm_pid,'15',True);

    # start the monitoring thread
    monitor_thread = threading.Thread(target=monitor_uvm, args=(uvm_pid,))
    monitor_thread.setDaemon(True)
    monitor_thread.start()

    result = 0;
    exit_sig = 0;
    exit_code = 0;
    while True:
        try:
            result = 0;
            ppid, result = os.waitpid(uvm_pid, 0);
            exit_sig = result & 0xff
            exit_code = (result & 0xff00) >> 8

            break;
        except OSError,e :
            # If its EINTR (interrupted), dont print error
            if not (e.errno == 4):
                debug(e); 
                time.sleep(1);

            continue; #ignore interrupted

    uvm_pid = 0;

    # remove pid file
    os.remove('/var/run/uvm-java.pid')

    # if this was expected, clean up and exit
    if exit_flag == 1:
        debug("==============================");
        debug("       UVM Stopped");
        debug("==============================");

        with open('/var/run/uvm.status', 'w+') as status_file:
            status_file.write('stopped\n')

        resetIptables();
        if developmentEnv:
            devEnvRestoreSystem()
        sys.exit(0);
    
    debug("*** untangle-vm unexpectedly exited ( exit code:%i exit signal:%i )" % (exit_code, exit_sig));
    
    resetIptables();
    flushConntrack();

    debug("*** copied %s to %s.crash ***" % (uvm_console_log, uvm_console_log))
    debug("*** copied %s to %s.crash ***" % (uvm_uvm_log, uvm_uvm_log))
    debug("*** copied %s to %s.crash ***" % (uvm_gc_log, uvm_gc_log))
    os.system("cp -fa %s.crash.1 %s.crash.2 2>/dev/null" % (uvm_console_log, uvm_console_log));
    os.system("cp -fa %s.crash   %s.crash.1 2>/dev/null" % (uvm_console_log, uvm_console_log));
    os.system("cp -fa %s         %s.crash   2>/dev/null" % (uvm_console_log, uvm_console_log));
    os.system("echo >| %s" % uvm_console_log) # nuke the console.log 
    os.system("cp -fa %s.crash.1 %s.crash.2 2>/dev/null" % (uvm_uvm_log, uvm_uvm_log));
    os.system("cp -fa %s.crash   %s.crash.1 2>/dev/null" % (uvm_uvm_log, uvm_uvm_log));
    os.system("cp -fa %s         %s.crash   2>/dev/null" % (uvm_uvm_log, uvm_uvm_log));
    os.system("cp -fa %s.crash.1 %s.crash.2 2>/dev/null" % (uvm_gc_log, uvm_gc_log));
    os.system("cp -fa %s.crash   %s.crash.1 2>/dev/null" % (uvm_gc_log, uvm_gc_log));
    os.system("cp -fa %s         %s.crash   2>/dev/null" % (uvm_gc_log, uvm_gc_log));
    os.system("cp -fa %s.crash.1 %s.crash.2 2>/dev/null" % (uvm_packages_log, uvm_packages_log));
    os.system("cp -fa %s.crash   %s.crash.1 2>/dev/null" % (uvm_packages_log, uvm_packages_log));
    os.system("dpkg -l 'untangle*' >| %s.crash" % (uvm_packages_log));
    
    # if the untangle-vm returns in the dev env, don't bother restarting it
    if developmentEnv:
        debug("*** Development environment: not restarting untangle-vm");
        devEnvRestoreSystem()
        sys.exit(1);

    # we sleep here to allow the system to recover from unexpected crashes
    # This will allow the kernel time to close sockets so they will be available when the UVM restarts
    time.sleep(30); 
    # end while loop
