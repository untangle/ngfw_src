{
    SpamLogEvent: {
    description: "These events are created by [[Spam Blocker]] and update the [[Database_Schema#mail_msgs|mail_msgs]] table when an email is scanned.",
    fields: [
        {
        name: "action",
        type: "SpamMessageAction",
        description: "The action",
        values: [ "PASS",  "MARK",  "DROP",  "BLOCK",  "QUARANTINE",  "SAFELIST",  "OVERSIZE",  "OUTBOUND",  "FAILED_BLOCKED",  "FAILED_PASSED",  "GREYLIST", ],
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddr",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "clientPort",
        type: "int",
        description: "The client port",
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "score",
        type: "float",
        description: "The score",
        },
        {
        name: "sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "serverAddr",
        type: "InetAddress",
        description: "The server address",
        },
        {
        name: "serverPort",
        type: "int",
        description: "The server port",
        },
        {
        name: "smtpMessageEvent.addresses",
        type: "Set",
        description: "The addresses",
        },
        {
        name: "smtpMessageEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "smtpMessageEvent.envelopeFromAddress",
        type: "String",
        description: "The envelop FROM address",
        },
        {
        name: "smtpMessageEvent.envelopeToAddress",
        type: "String",
        description: "The envelope TO address",
        },
        {
        name: "smtpMessageEvent.messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "smtpMessageEvent.receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "smtpMessageEvent.sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "smtpMessageEvent.sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "smtpMessageEvent.sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "smtpMessageEvent.sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "smtpMessageEvent.sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "smtpMessageEvent.sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "smtpMessageEvent.sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "smtpMessageEvent.sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "smtpMessageEvent.sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "smtpMessageEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "smtpMessageEvent.subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "smtpMessageEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "smtpMessageEvent.tmpFile",
        type: "File",
        description: "The /tmp file",
        },
        {
        name: "isSpam",
        type: "boolean",
        description: "True if spam, false otherwise",
        },
        {
        name: "subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "testsString",
        type: "String",
        description: "The tests string from the spam engine",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vendorName",
        type: "String",
        description: "The application name",
        },
    ]
    },
    SpamSmtpTarpitEvent: {
    description: "These events are created by [[Spam Blocker]] and inserted to the [[Database_Schema#smtp_tarpit_events|smtp_tarpit_events]] table when a session is tarpitted.",
    fields: [
        {
        name: "IPAddr",
        type: "InetAddress",
        description: "The IP address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vendorName",
        type: "String",
        description: "The application name",
        },
    ]
    },
    SpamLogEvent: {
    description: "These events are created by [[Spam Blocker]] and update the [[Database_Schema#mail_msgs|mail_msgs]] table when an email is scanned.",
    fields: [
        {
        name: "action",
        type: "SpamMessageAction",
        description: "The action",
        values: [ "PASS",  "MARK",  "DROP",  "BLOCK",  "QUARANTINE",  "SAFELIST",  "OVERSIZE",  "OUTBOUND",  "FAILED_BLOCKED",  "FAILED_PASSED",  "GREYLIST", ],
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddr",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "clientPort",
        type: "int",
        description: "The client port",
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "score",
        type: "float",
        description: "The score",
        },
        {
        name: "sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "serverAddr",
        type: "InetAddress",
        description: "The server address",
        },
        {
        name: "serverPort",
        type: "int",
        description: "The server port",
        },
        {
        name: "smtpMessageEvent.addresses",
        type: "Set",
        description: "The addresses",
        },
        {
        name: "smtpMessageEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "smtpMessageEvent.envelopeFromAddress",
        type: "String",
        description: "The envelop FROM address",
        },
        {
        name: "smtpMessageEvent.envelopeToAddress",
        type: "String",
        description: "The envelope TO address",
        },
        {
        name: "smtpMessageEvent.messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "smtpMessageEvent.receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "smtpMessageEvent.sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "smtpMessageEvent.sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "smtpMessageEvent.sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "smtpMessageEvent.sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "smtpMessageEvent.sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "smtpMessageEvent.sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "smtpMessageEvent.sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "smtpMessageEvent.sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "smtpMessageEvent.sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "smtpMessageEvent.sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "smtpMessageEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "smtpMessageEvent.subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "smtpMessageEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "smtpMessageEvent.tmpFile",
        type: "File",
        description: "The /tmp file",
        },
        {
        name: "isSpam",
        type: "boolean",
        description: "True if spam, false otherwise",
        },
        {
        name: "subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "testsString",
        type: "String",
        description: "The tests string from the spam engine",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vendorName",
        type: "String",
        description: "The application name",
        },
    ]
    },
    SpamSmtpTarpitEvent: {
    description: "These events are created by [[Spam Blocker]] and inserted to the [[Database_Schema#smtp_tarpit_events|smtp_tarpit_events]] table when a session is tarpitted.",
    fields: [
        {
        name: "IPAddr",
        type: "InetAddress",
        description: "The IP address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vendorName",
        type: "String",
        description: "The application name",
        },
    ]
    },
    OpenVpnStatusEvent: {
    description: "These events are created by [[OpenVPN]] and update the [[Database_Schema#openvpn_stats|openvpn_stats]] table periodically.",
    fields: [
        {
        name: "address",
        type: "InetAddress",
        description: "The address",
        },
        {
        name: "bytesRxDelta",
        type: "long",
        description: "The delta number of RX (received) bytes from the previous event",
        },
        {
        name: "bytesRxTotal",
        type: "long",
        description: "The total number of RX (received) bytes",
        },
        {
        name: "bytesTxDelta",
        type: "long",
        description: "The delta number of TX (transmitted) bytes from the previous event",
        },
        {
        name: "bytesTxTotal",
        type: "long",
        description: "The total number of TX (transmitted) bytes",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientName",
        type: "String",
        description: "The client name",
        },
        {
        name: "end",
        type: "Timestamp",
        description: "The end",
        },
        {
        name: "poolAddress",
        type: "InetAddress",
        description: "The pool address",
        },
        {
        name: "port",
        type: "int",
        description: "The port",
        },
        {
        name: "start",
        type: "Timestamp",
        description: "The start",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    OpenVpnEvent: {
    description: "These events are created by [[OpenVPN]] and update the [[Database_Schema#openvpn_events|openvpn_events]] table when OpenVPN processes a client action.",
    fields: [
        {
        name: "address",
        type: "InetAddress",
        description: "The address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientName",
        type: "String",
        description: "The client name",
        },
        {
        name: "poolAddress",
        type: "InetAddress",
        description: "The pool address",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "type",
        type: "OpenVpnEvent$EventType",
        description: "The type",
        values: [ "CONNECT",  "DISCONNECT", ],
        },
    ]
    },
    ApplicationControlLiteEvent: {
    description: "These events are created by [[Application Control Lite]] and update the [[Database_Schema#sessions|sessions]] table when application control lite identifies a session.",
    fields: [
        {
        name: "blocked",
        type: "boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "protocol",
        type: "String",
        description: "The protocol",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    FirewallEvent: {
    description: "These events are created by [[Firewall]] and update the [[Database_Schema#sessions|sessions]] table when a firewall rule matches a session.",
    fields: [
        {
        name: "blocked",
        type: "boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "flagged",
        type: "boolean",
        description: "True if flagged, false otherwise",
        },
        {
        name: "ruleId",
        type: "long",
        description: "The rule ID",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    PrioritizeEvent: {
    description: "These events are created by the [[Bandwidth Control]] and update the [[Database_Schema#sessions|session]] table when a session is prioritized.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "priority",
        type: "int",
        description: "The priority",
        },
        {
        name: "ruleId",
        type: "int",
        description: "The rule ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    AdBlockerEvent: {
    description: "These events are created by [[Ad Blocker]] and update the [[Database_Schema#http_events|http_events]] table when an ad is blocked.",
    fields: [
        {
        name: "action",
        type: "Action",
        description: "The action",
        values: [ "PASS",  "BLOCK", ],
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "reason",
        type: "String",
        description: "The reason",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    CookieEvent: {
    description: "These events are created by [[Ad Blocker]] and update the [[Database_Schema#http_events|http_events]] table when a cookie is blocked.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "identification",
        type: "String",
        description: "The identification string",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    VirusFtpEvent: {
    description: "These events are created by [[Virus Blocker]] and update the [[Database_Schema#ftp_events|ftp_events]] table when Virus Blocker scans an FTP transfer.",
    fields: [
        {
        name: "appName",
        type: "String",
        description: "The name of the application",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clean",
        type: "boolean",
        description: "True if clean, false otherwise",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "uri",
        type: "String",
        description: "The URI",
        },
        {
        name: "virusName",
        type: "String",
        description: "The virus name, if not clean",
        },
    ]
    },
    VirusHttpEvent: {
    description: "These events are created by [[Virus Blocker]] and update the [[Database_Schema#http_events|http_events]] table when Virus Blocker scans an HTTP transfer.",
    fields: [
        {
        name: "appName",
        type: "String",
        description: "The name of the application",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clean",
        type: "boolean",
        description: "True if clean, false otherwise",
        },
        {
        name: "requestLine",
        type: "RequestLine",
        description: "The request line",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "virusName",
        type: "String",
        description: "The virus name, if not clean",
        },
    ]
    },
    VirusSmtpEvent: {
    description: "These events are created by [[Virus Blocker]] and update the [[Database_Schema#mail_msgs|mail_msgs]] table when Virus Blocker scans an email.",
    fields: [
        {
        name: "action",
        type: "String",
        description: "The action",
        },
        {
        name: "appName",
        type: "String",
        description: "The name of the application",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clean",
        type: "boolean",
        description: "True if clean, false otherwise",
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "virusName",
        type: "String",
        description: "The virus name, if not clean",
        },
    ]
    },
    FirewallEvent: {
    description: "These events are created by [[Firewall]] and update the [[Database_Schema#sessions|sessions]] table when a firewall rule matches a session.",
    fields: [
        {
        name: "blocked",
        type: "boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "flagged",
        type: "boolean",
        description: "True if flagged, false otherwise",
        },
        {
        name: "ruleId",
        type: "long",
        description: "The rule ID",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    OpenVpnStatusEvent: {
    description: "These events are created by [[OpenVPN]] and update the [[Database_Schema#openvpn_stats|openvpn_stats]] table periodically.",
    fields: [
        {
        name: "address",
        type: "InetAddress",
        description: "The address",
        },
        {
        name: "bytesRxDelta",
        type: "long",
        description: "The delta number of RX (received) bytes from the previous event",
        },
        {
        name: "bytesRxTotal",
        type: "long",
        description: "The total number of RX (received) bytes",
        },
        {
        name: "bytesTxDelta",
        type: "long",
        description: "The delta number of TX (transmitted) bytes from the previous event",
        },
        {
        name: "bytesTxTotal",
        type: "long",
        description: "The total number of TX (transmitted) bytes",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientName",
        type: "String",
        description: "The client name",
        },
        {
        name: "end",
        type: "Timestamp",
        description: "The end",
        },
        {
        name: "poolAddress",
        type: "InetAddress",
        description: "The pool address",
        },
        {
        name: "port",
        type: "int",
        description: "The port",
        },
        {
        name: "start",
        type: "Timestamp",
        description: "The start",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    OpenVpnEvent: {
    description: "These events are created by [[OpenVPN]] and update the [[Database_Schema#openvpn_events|openvpn_events]] table when OpenVPN processes a client action.",
    fields: [
        {
        name: "address",
        type: "InetAddress",
        description: "The address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientName",
        type: "String",
        description: "The client name",
        },
        {
        name: "poolAddress",
        type: "InetAddress",
        description: "The pool address",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "type",
        type: "OpenVpnEvent$EventType",
        description: "The type",
        values: [ "CONNECT",  "DISCONNECT", ],
        },
    ]
    },
    AdminLoginEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#admin_logins|admin_logins]] table when the host table is modified.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddress",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "local",
        type: "boolean",
        description: "1 if login is done via local console, 0 otherwise",
        },
        {
        name: "login",
        type: "String",
        description: "The login username",
        },
        {
        name: "reason",
        type: "String",
        description: "The reason",
        },
        {
        name: "succeeded",
        type: "boolean",
        description: "1 if successful, 0 otherwise",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    AlertEvent: {
    description: "These events are created by [[Reports]] and inserted to the [[Database_Schema#alerts|alerts]] table when an alert fires.",
    fields: [
        {
        name: "causalRule",
        type: "EventRule",
        description: "The causal rule",
        },
        {
        name: "cause",
        type: "LogEvent",
        description: "The cause",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "description",
        type: "String",
        description: "The description",
        },
        {
        name: "eventSent",
        type: "Boolean",
        description: "True if the event was sent, false otherwise",
        },
        {
        name: "json",
        type: "String",
        description: "The JSON string",
        },
        {
        name: "summaryText",
        type: "String",
        description: "The summary text",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    InterfaceStatEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#settings_changes|interface_stat_events]] table periodically with interface stats.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "interfaceId",
        type: "int",
        description: "The interface ID",
        },
        {
        name: "rxBytes",
        type: "double",
        description: "The total of received bytes",
        },
        {
        name: "rxRate",
        type: "double",
        description: "The RX rate in byte/s",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "txBytes",
        type: "double",
        description: "The total of transmitted bytes",
        },
        {
        name: "txRate",
        type: "double",
        description: "The TX rate in byte/s",
        },
    ]
    },
    LogEvent: {
    description: "These base class for all events.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SystemStatEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#server_events|server_events]] table periodically.",
    fields: [
        {
        name: "activeHosts",
        type: "int",
        description: "The active host count",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "cpuSystem",
        type: "float",
        description: "The system CPU utilization",
        },
        {
        name: "cpuUser",
        type: "float",
        description: "The user CPU utilization",
        },
        {
        name: "diskFree",
        type: "long",
        description: "The amount of disk free",
        },
        {
        name: "diskFreePercent",
        type: "float",
        description: "The percentage of disk free",
        },
        {
        name: "diskTotal",
        type: "long",
        description: "The total size of the disk",
        },
        {
        name: "diskUsed",
        type: "long",
        description: "The amount of disk used",
        },
        {
        name: "diskUsedPercent",
        type: "float",
        description: "The percentage of disk used",
        },
        {
        name: "load1",
        type: "float",
        description: "The 1-minute CPU load",
        },
        {
        name: "load15",
        type: "float",
        description: "The 15-minute CPU load",
        },
        {
        name: "load5",
        type: "float",
        description: "The 5-minute CPU load",
        },
        {
        name: "memBuffers",
        type: "long",
        description: "The amount of memory used by buffers",
        },
        {
        name: "memCache",
        type: "long",
        description: "The amount of memory used by cache",
        },
        {
        name: "memFree",
        type: "long",
        description: "The amount of free memory",
        },
        {
        name: "memFreePercent",
        type: "float",
        description: "The percentage of total memory that is free",
        },
        {
        name: "memTotal",
        type: "long",
        description: "The total amount of memory",
        },
        {
        name: "memUsed",
        type: "long",
        description: "The amount of used memory",
        },
        {
        name: "memUsedPercent",
        type: "float",
        description: "The percentage of total memory that is used",
        },
        {
        name: "swapFree",
        type: "long",
        description: "The amount of free swap",
        },
        {
        name: "swapFreePercent",
        type: "float",
        description: "The percentage of total swap that is free",
        },
        {
        name: "swapTotal",
        type: "long",
        description: "The total size of swap",
        },
        {
        name: "swapUsed",
        type: "long",
        description: "The amount of used swap",
        },
        {
        name: "swapUsedPercent",
        type: "float",
        description: "The percentage of total swap that is used",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SessionMinuteEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|session_minutes]] table each minute a session exists.",
    fields: [
        {
        name: "c2sBytes",
        type: "long",
        description: "The number of bytes sent from the client to the server",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "s2cBytes",
        type: "long",
        description: "The number of bytes sent from the server to the client",
        },
        {
        name: "sessionId",
        type: "long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SessionEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|sessions]] table each time a session is created.",
    fields: [
        {
        name: "CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "username",
        type: "String",
        description: "The username",
        },
    ]
    },
    SessionStatsEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|sessions]] table when a session ends with the updated stats.",
    fields: [
        {
        name: "c2pBytes",
        type: "long",
        description: "The number of bytes sent from the client to Untangle",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "endTime",
        type: "long",
        description: "The end time/date",
        },
        {
        name: "p2cBytes",
        type: "long",
        description: "The number of bytes sent to the client from Untangle",
        },
        {
        name: "p2sBytes",
        type: "long",
        description: "The number of bytes sent to the server from Untangle",
        },
        {
        name: "s2pBytes",
        type: "long",
        description: "The number of bytes sent from the server to Untangle",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SessionNatEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|sessions]] table each time a session is NATd with the post-NAT information.",
    fields: [
        {
        name: "SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    QuotaEvent: {
    description: "These events are created by the [[Bandwidth Control]] and inserted or update the [[Database_Schema#quotas|quotas]] table when quotas are given or exceeded.",
    fields: [
        {
        name: "action",
        type: "int",
        description: "The action (1=Quota Given, 2=Quota Exceeded)",
        },
        {
        name: "address",
        type: "InetAddress",
        description: "The address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "quotaSize",
        type: "long",
        description: "The quota size",
        },
        {
        name: "reason",
        type: "String",
        description: "The reason",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    HostTableEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#host_table_updates|host_table_updates]] table when the host table is modified.",
    fields: [
        {
        name: "address",
        type: "InetAddress",
        description: "The address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "key",
        type: "String",
        description: "The key",
        },
        {
        name: "oldValue",
        type: "String",
        description: "The old value",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "value",
        type: "String",
        description: "The value",
        },
    ]
    },
    DeviceTableEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#device_table_updates|device_table_updates]] table when the device list is modified.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "device",
        type: "DeviceTableEntry",
        description: "The Device",
        },
        {
        name: "key",
        type: "String",
        description: "The key",
        },
        {
        name: "macAddress",
        type: "String",
        description: "The MAC address",
        },
        {
        name: "oldValue",
        type: "String",
        description: "The old value",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "value",
        type: "String",
        description: "The value",
        },
    ]
    },
    SettingsChangesEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#settings_changes|settings_changes]] table when settings are changed.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "settingsFile",
        type: "String",
        description: "The settings file",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "username",
        type: "String",
        description: "The username",
        },
    ]
    },
    UserTableEvent: {
    description: "These events are created by the base system and inserted to the [[Database_Schema#host_table_updates|host_table_updates]] table when the host table is modified.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "key",
        type: "String",
        description: "The key",
        },
        {
        name: "oldValue",
        type: "String",
        description: "The old value",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "username",
        type: "String",
        description: "The username",
        },
        {
        name: "value",
        type: "String",
        description: "The value",
        },
    ]
    },
    SessionMinuteEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|session_minutes]] table each minute a session exists.",
    fields: [
        {
        name: "c2sBytes",
        type: "long",
        description: "The number of bytes sent from the client to the server",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "s2cBytes",
        type: "long",
        description: "The number of bytes sent from the server to the client",
        },
        {
        name: "sessionId",
        type: "long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SessionEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|sessions]] table each time a session is created.",
    fields: [
        {
        name: "CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "username",
        type: "String",
        description: "The username",
        },
    ]
    },
    SessionStatsEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|sessions]] table when a session ends with the updated stats.",
    fields: [
        {
        name: "c2pBytes",
        type: "long",
        description: "The number of bytes sent from the client to Untangle",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "endTime",
        type: "long",
        description: "The end time/date",
        },
        {
        name: "p2cBytes",
        type: "long",
        description: "The number of bytes sent to the client from Untangle",
        },
        {
        name: "p2sBytes",
        type: "long",
        description: "The number of bytes sent to the server from Untangle",
        },
        {
        name: "s2pBytes",
        type: "long",
        description: "The number of bytes sent from the server to Untangle",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SessionNatEvent: {
    description: "These events are created by the base system and update the [[Database_Schema#sessions|sessions]] table each time a session is NATd with the post-NAT information.",
    fields: [
        {
        name: "SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    QuotaEvent: {
    description: "These events are created by the [[Bandwidth Control]] and inserted or update the [[Database_Schema#quotas|quotas]] table when quotas are given or exceeded.",
    fields: [
        {
        name: "action",
        type: "int",
        description: "The action (1=Quota Given, 2=Quota Exceeded)",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "entity",
        type: "String",
        description: "The entity",
        },
        {
        name: "quotaSize",
        type: "long",
        description: "The quota size",
        },
        {
        name: "reason",
        type: "String",
        description: "The reason",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SmtpMessageAddressEvent: {
    description: "These events are created by SMTP subsystem and inserted to the [[Database_Schema#mail_addrs|mail_addrs]] table for each address on each email.",
    fields: [
        {
        name: "addr",
        type: "String",
        description: "The address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "kind",
        type: "AddressKind",
        description: "The type for this address (F=From, T=To, C=CC, G=Envelope From, B=Envelope To, X=Unknown)",
        values: [ "FROM",  "TO",  "CC",  "ENVELOPE_FROM",  "ENVELOPE_TO",  "USER",  "", ],
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "personal",
        type: "String",
        description: "personal",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SmtpMessageEvent: {
    description: "These events are created by SMTP subsystem and inserted to the [[Database_Schema#mail_msgs|mail_msgs]] table for each email.",
    fields: [
        {
        name: "addresses",
        type: "Set",
        description: "The addresses",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "envelopeFromAddress",
        type: "String",
        description: "The envelop FROM address",
        },
        {
        name: "envelopeToAddress",
        type: "String",
        description: "The envelope TO address",
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "tmpFile",
        type: "File",
        description: "The /tmp file",
        },
    ]
    },
    CaptureRuleEvent: {
    description: "These events are created by [[Captive Portal]] and update the [[Database_Schema#sessions|sessions]] table when Captive Portal processes a session.",
    fields: [
        {
        name: "captured",
        type: "boolean",
        description: "True if captured, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "ruleId",
        type: "Integer",
        description: "The rule ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    CaptivePortalUserEvent: {
    description: "These events are created by [[Captive Portal]] and inserted to the [[Database_Schema#captive_portal_user_events|captive_portal_user_events]] table when Captive Portal user takes an action.",
    fields: [
        {
        name: "authenticationType",
        type: "CaptivePortalSettings$AuthenticationType",
        description: "The authentication type",
        values: [ "NONE",  "LOCAL_DIRECTORY",  "RADIUS",  "ACTIVE_DIRECTORY",  "ANY_DIRCON",  "GOOGLE",  "FACEBOOK",  "MICROSOFT",  "ANY_OAUTH",  "CUSTOM",  "ANY", ],
        },
        {
        name: "authenticationTypeValue",
        type: "String",
        description: "The authentication type as a string",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddr",
        type: "String",
        description: "The client address",
        },
        {
        name: "event",
        type: "CaptivePortalUserEvent$EventType",
        description: "The event (LOGIN, FAILED, TIMEOUT, INACTIVE, USER_LOGOUT, ADMIN_LOGOUT)",
        values: [ "LOGIN",  "FAILED",  "TIMEOUT",  "INACTIVE",  "USER_LOGOUT",  "ADMIN_LOGOUT",  "HOST_CHANGE", ],
        },
        {
        name: "eventValue",
        type: "String",
        description: "The event value as a string (LOGIN, FAILED, TIMEOUT, INACTIVE, USER_LOGOUT, ADMIN_LOGOUT)",
        },
        {
        name: "loginName",
        type: "String",
        description: "The login name",
        },
        {
        name: "policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    AdBlockerEvent: {
    description: "These events are created by [[Ad Blocker]] and update the [[Database_Schema#http_events|http_events]] table when an ad is blocked.",
    fields: [
        {
        name: "action",
        type: "Action",
        description: "The action",
        values: [ "PASS",  "BLOCK", ],
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "reason",
        type: "String",
        description: "The reason",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    CookieEvent: {
    description: "These events are created by [[Ad Blocker]] and update the [[Database_Schema#http_events|http_events]] table when a cookie is blocked.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "identification",
        type: "String",
        description: "The identification string",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    HttpRequestEvent: {
    description: "These events are created by HTTP subsystem and inserted to the [[Database_Schema#http_events|http_events]] table when a web request happens.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "domain",
        type: "String",
        description: "The domain",
        },
        {
        name: "host",
        type: "String",
        description: "The host",
        },
        {
        name: "method",
        type: "HttpMethod",
        description: "The HTTP method",
        },
        {
        name: "referer",
        type: "String",
        description: "The referer",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "requestUri",
        type: "URI",
        description: "The request URI",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    HttpResponseEvent: {
    description: "These events are created by HTTP subsystem and update the [[Database_Schema#http_events|http_events]] table when a web response happens.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "contentFilename",
        type: "String",
        description: "The content filename",
        },
        {
        name: "contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "contentType",
        type: "String",
        description: "The content type",
        },
        {
        name: "httpRequestEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "httpRequestEvent.contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "httpRequestEvent.domain",
        type: "String",
        description: "The domain",
        },
        {
        name: "httpRequestEvent.host",
        type: "String",
        description: "The host",
        },
        {
        name: "httpRequestEvent.method",
        type: "HttpMethod",
        description: "The HTTP method",
        },
        {
        name: "httpRequestEvent.referer",
        type: "String",
        description: "The referer",
        },
        {
        name: "httpRequestEvent.requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "httpRequestEvent.requestUri",
        type: "URI",
        description: "The request URI",
        },
        {
        name: "httpRequestEvent.sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "httpRequestEvent.sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "httpRequestEvent.sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "httpRequestEvent.sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "httpRequestEvent.sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "httpRequestEvent.sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "httpRequestEvent.sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "httpRequestEvent.sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "httpRequestEvent.sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "httpRequestEvent.sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "httpRequestEvent.sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "httpRequestEvent.sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "httpRequestEvent.sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "httpRequestEvent.sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "httpRequestEvent.sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "httpRequestEvent.sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "httpRequestEvent.sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "httpRequestEvent.sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "httpRequestEvent.sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "httpRequestEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "requestLine",
        type: "RequestLine",
        description: "The request line",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    WebCacheEvent: {
    description: "These events are created by [[Web Cache]] and inserted to the [[Database_Schema#web_cache_stats|web_cache_stats]] table periodically.",
    fields: [
        {
        name: "bypassCount",
        type: "long",
        description: "The number of bypasses",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "hitBytes",
        type: "long",
        description: "The number of bytes worth of hits",
        },
        {
        name: "hitCount",
        type: "long",
        description: "The number of hits",
        },
        {
        name: "missBytes",
        type: "long",
        description: "The number of bytes worth of misses",
        },
        {
        name: "missCount",
        type: "long",
        description: "The number of misses",
        },
        {
        name: "policyId",
        type: "Long",
        description: "The policy ID",
        },
        {
        name: "systemCount",
        type: "long",
        description: "The number of system bypasses",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    TunnelVpnStatusEvent: {
    description: "These events are created by [[Tunnel VPN]] and inserted to the [[Database_Schema#tunnel_vpn_stats|tunnel_vpn_stats]] table periodically.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "inBytes",
        type: "long",
        description: "The number of bytes received from this tunnel",
        },
        {
        name: "outBytes",
        type: "long",
        description: "The number of bytes sent in this tunnel",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "tunnelName",
        type: "String",
        description: "The name of this tunnel",
        },
    ]
    },
    TunnelVpnEvent: {
    description: "These events are created by [[Tunnel VPN]] and inserted to the [[Database_Schema#tunnel_vpn_events|tunnel_vpn_events]] table when a tunnel connection event occurs.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "eventType",
        type: "TunnelVpnEvent$EventType",
        description: "The event type",
        values: [ "CONNECT",  "DISCONNECT", ],
        },
        {
        name: "localAddress",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "serverAddress",
        type: "InetAddress",
        description: "The server address",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "tunnelName",
        type: "String",
        description: "The name of this tunnel",
        },
    ]
    },
    IntrusionPreventionLogEvent: {
    description: "These events are created by [[Intrusion Prevention]] and inserted to the [[Database_Schema#intrusion_prevention_events|intrusion_prevention_events]] table when a rule matches.",
    fields: [
        {
        name: "blocked",
        type: "boolean",
        description: "1 if blocked, 0 otherwise",
        },
        {
        name: "category",
        type: "String",
        description: "The category",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "classificationId",
        type: "long",
        description: "The classification ID",
        },
        {
        name: "classtype",
        type: "String",
        description: "The classtype",
        },
        {
        name: "dportIcode",
        type: "int",
        description: "The dportIcode",
        },
        {
        name: "eventId",
        type: "long",
        description: "The event ID",
        },
        {
        name: "eventMicrosecond",
        type: "long",
        description: "The event microsecond",
        },
        {
        name: "eventSecond",
        type: "long",
        description: "The event second",
        },
        {
        name: "eventType",
        type: "long",
        description: "The event type",
        },
        {
        name: "generatorId",
        type: "long",
        description: "The generator ID",
        },
        {
        name: "impact",
        type: "short",
        description: "The impact",
        },
        {
        name: "impactFlag",
        type: "short",
        description: "The impact flag",
        },
        {
        name: "ipDestination",
        type: "InetAddress",
        description: "The IP address destination",
        },
        {
        name: "ipSource",
        type: "InetAddress",
        description: "The IP address source",
        },
        {
        name: "mplsLabel",
        type: "long",
        description: "The mplsLabel",
        },
        {
        name: "msg",
        type: "String",
        description: "The msg",
        },
        {
        name: "padding",
        type: "int",
        description: "The padding",
        },
        {
        name: "priorityId",
        type: "long",
        description: "The priority ID",
        },
        {
        name: "protocol",
        type: "short",
        description: "The protocol",
        },
        {
        name: "rid",
        type: "String",
        description: "Rule ID",
        },
        {
        name: "sensorId",
        type: "long",
        description: "The sensor ID",
        },
        {
        name: "signatureId",
        type: "long",
        description: "The signature ID",
        },
        {
        name: "signatureRevision",
        type: "long",
        description: "The signature revision",
        },
        {
        name: "sportItype",
        type: "int",
        description: "The sportItype",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vlanId",
        type: "int",
        description: "The VLAN Id",
        },
    ]
    },
    AlertEvent: {
    description: "These events are created by [[Reports]] and inserted to the [[Database_Schema#alerts|alerts]] table when an alert fires.",
    fields: [
        {
        name: "cause",
        type: "LogEvent",
        description: "The cause",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "description",
        type: "String",
        description: "The description",
        },
        {
        name: "json",
        type: "JSONObject",
        description: "The JSON string",
        },
        {
        name: "summaryText",
        type: "String",
        description: "The summary text",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SmtpMessageAddressEvent: {
    description: "These events are created by SMTP subsystem and inserted to the [[Database_Schema#mail_addrs|mail_addrs]] table for each address on each email.",
    fields: [
        {
        name: "addr",
        type: "String",
        description: "The address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "kind",
        type: "AddressKind",
        description: "The type for this address (F=From, T=To, C=CC, G=Envelope From, B=Envelope To, X=Unknown)",
        values: [ "FROM",  "TO",  "CC",  "ENVELOPE_FROM",  "ENVELOPE_TO",  "USER",  "", ],
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "personal",
        type: "String",
        description: "personal",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SmtpMessageEvent: {
    description: "These events are created by SMTP subsystem and inserted to the [[Database_Schema#mail_msgs|mail_msgs]] table for each email.",
    fields: [
        {
        name: "addresses",
        type: "Set",
        description: "The addresses",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "envelopeFromAddress",
        type: "String",
        description: "The envelop FROM address",
        },
        {
        name: "envelopeToAddress",
        type: "String",
        description: "The envelope TO address",
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "tmpFile",
        type: "File",
        description: "The /tmp file",
        },
    ]
    },
    ApplicationControlLogEvent: {
    description: "These events are created by [[Application Control]] and update the [[Database_Schema#sessions|sessions]] table when application control identifies a session.",
    fields: [
        {
        name: "application",
        type: "String",
        description: "The application",
        },
        {
        name: "blocked",
        type: "boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "category",
        type: "String",
        description: "The category",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "confidence",
        type: "Integer",
        description: "The confidence (0-100)",
        },
        {
        name: "detail",
        type: "String",
        description: "The details",
        },
        {
        name: "flagged",
        type: "boolean",
        description: "True if flagged, false otherwise",
        },
        {
        name: "protochain",
        type: "String",
        description: "The protochain",
        },
        {
        name: "ruleId",
        type: "Integer",
        description: "The rule ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "state",
        type: "Integer",
        description: "The state",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    LoginEvent: {
    description: "These events are created by [[Directory Connector]] and inserted to the [[Database_Schema#directory_connector_login_events|directory_connector_login_events]] table for each login.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddr",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "domain",
        type: "String",
        description: "The domain",
        },
        {
        name: "event",
        type: "String",
        description: "The event",
        },
        {
        name: "loginName",
        type: "String",
        description: "The login name",
        },
        {
        name: "loginType",
        type: "String",
        description: "W = Windows login, A=Active Directory, R=RADIUS, T=test",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    WebFilterEvent: {
    description: "These events are created by [[Web Filter]] and update the [[Database_Schema#http_events|http_events]] table when web filter processes a web request.",
    fields: [
        {
        name: "appName",
        type: "String",
        description: "The name of the application",
        },
        {
        name: "blocked",
        type: "Boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "category",
        type: "String",
        description: "The category",
        },
        {
        name: "categoryId",
        type: "Integer",
        description: "Numeric value of matching category",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "flagged",
        type: "Boolean",
        description: "True if flagged, false otherwise",
        },
        {
        name: "reason",
        type: "Reason",
        description: "The reason",
        values: [ "BLOCK_CATEGORY",  "BLOCK_URL",  "BLOCK_SEARCH_TERM",  "BLOCK_IP_HOST",  "PASS_URL",  "PASS_REFERER_URL",  "PASS_CLIENT",  "PASS_UNBLOCK",  "FILTER_RULE",  "DEFAULT", ],
        },
        {
        name: "requestLine",
        type: "RequestLine",
        description: "The request line",
        },
        {
        name: "ruleId",
        type: "Integer",
        description: "The rule ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    WebFilterQueryEvent: {
    description: "These events are created by [[Web Filter]] and inserted to the [[Database_Schema#http_query_events|http_query_events]] table when web filter processes a search engine search.",
    fields: [
        {
        name: "appName",
        type: "String",
        description: "The name of the application",
        },
        {
        name: "blocked",
        type: "Boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "flagged",
        type: "Boolean",
        description: "True if flagged, false otherwise",
        },
        {
        name: "host",
        type: "String",
        description: "The host",
        },
        {
        name: "method",
        type: "HttpMethod",
        description: "The method",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "requestUri",
        type: "URI",
        description: "The request URI",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "term",
        type: "String",
        description: "The search term/phrase",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    WanFailoverTestEvent: {
    description: "These events are created by [[WAN Failover]] and inserted to the [[Database_Schema#wan_failover_test_events|wan_failover_test_events]] table when a test is run.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "description",
        type: "String",
        description: "The description",
        },
        {
        name: "interfaceId",
        type: "int",
        description: "The interface ID",
        },
        {
        name: "name",
        type: "String",
        description: "The test name",
        },
        {
        name: "osName",
        type: "String",
        description: "The O/S interface name",
        },
        {
        name: "success",
        type: "Boolean",
        description: "True if successful, false otherwise",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    WanFailoverEvent: {
    description: "These events are created by [[WAN Failover]] and inserted to the [[Database_Schema#wan_failover_action_events|wan_failover_action_events]] table when WAN Failover takes an action.",
    fields: [
        {
        name: "action",
        type: "WanFailoverEvent$Action",
        description: "The action",
        values: [ "CONNECTED",  "DISCONNECTED", ],
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "interfaceId",
        type: "int",
        description: "The interface ID",
        },
        {
        name: "name",
        type: "String",
        description: "The name",
        },
        {
        name: "osName",
        type: "String",
        description: "The O/S interface name",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    CaptureRuleEvent: {
    description: "These events are created by [[Captive Portal]] and update the [[Database_Schema#sessions|sessions]] table when Captive Portal processes a session.",
    fields: [
        {
        name: "captured",
        type: "boolean",
        description: "True if captured, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "ruleId",
        type: "Integer",
        description: "The rule ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    CaptivePortalUserEvent: {
    description: "These events are created by [[Captive Portal]] and inserted to the [[Database_Schema#captive_portal_user_events|captive_portal_user_events]] table when Captive Portal user takes an action.",
    fields: [
        {
        name: "authenticationType",
        type: "CaptivePortalSettings$AuthenticationType",
        description: "The authentication type",
        values: [ "ANY",  "ACTIVE_DIRECTORY",  "RADIUS",  "LOCAL_DIRECTORY",  "GOOGLE",  "FACEBOOK",  "CUSTOM",  "NONE", ],
        },
        {
        name: "authenticationTypeValue",
        type: "String",
        description: "The authentication type as a string",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddr",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "event",
        type: "CaptivePortalUserEvent$EventType",
        description: "The event (LOGIN, FAILED, TIMEOUT, INACTIVE, USER_LOGOUT, ADMIN_LOGOUT)",
        values: [ "LOGIN",  "FAILED",  "TIMEOUT",  "INACTIVE",  "USER_LOGOUT",  "ADMIN_LOGOUT",  "HOST_CHANGE", ],
        },
        {
        name: "eventValue",
        type: "String",
        description: "The event value as a string (LOGIN, FAILED, TIMEOUT, INACTIVE, USER_LOGOUT, ADMIN_LOGOUT)",
        },
        {
        name: "loginName",
        type: "String",
        description: "The login name",
        },
        {
        name: "policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SpamLogEvent: {
    description: "These events are created by [[Spam Blocker]] and update the [[Database_Schema#mail_msgs|mail_msgs]] table when an email is scanned.",
    fields: [
        {
        name: "action",
        type: "SpamMessageAction",
        description: "The action",
        values: [ "PASS",  "MARK",  "DROP",  "BLOCK",  "QUARANTINE",  "SAFELIST",  "OVERSIZE",  "OUTBOUND",  "FAILED_BLOCKED",  "FAILED_PASSED",  "GREYLIST", ],
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddr",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "clientPort",
        type: "int",
        description: "The client port",
        },
        {
        name: "messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "score",
        type: "float",
        description: "The score",
        },
        {
        name: "sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "serverAddr",
        type: "InetAddress",
        description: "The server address",
        },
        {
        name: "serverPort",
        type: "int",
        description: "The server port",
        },
        {
        name: "smtpMessageEvent.addresses",
        type: "Set",
        description: "The addresses",
        },
        {
        name: "smtpMessageEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "smtpMessageEvent.envelopeFromAddress",
        type: "String",
        description: "The envelop FROM address",
        },
        {
        name: "smtpMessageEvent.envelopeToAddress",
        type: "String",
        description: "The envelope TO address",
        },
        {
        name: "smtpMessageEvent.messageId",
        type: "Long",
        description: "The message ID",
        },
        {
        name: "smtpMessageEvent.receiver",
        type: "String",
        description: "The receiver",
        },
        {
        name: "smtpMessageEvent.sender",
        type: "String",
        description: "The sender",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "smtpMessageEvent.sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "smtpMessageEvent.sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "smtpMessageEvent.sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "smtpMessageEvent.sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "smtpMessageEvent.sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "smtpMessageEvent.sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "smtpMessageEvent.sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "smtpMessageEvent.sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "smtpMessageEvent.sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "smtpMessageEvent.sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "smtpMessageEvent.sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "smtpMessageEvent.sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "smtpMessageEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "smtpMessageEvent.subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "smtpMessageEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "smtpMessageEvent.tmpFile",
        type: "File",
        description: "The /tmp file",
        },
        {
        name: "isSpam",
        type: "boolean",
        description: "True if spam, false otherwise",
        },
        {
        name: "subject",
        type: "String",
        description: "The subject",
        },
        {
        name: "testsString",
        type: "String",
        description: "The tests string from the spam engine",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vendorName",
        type: "String",
        description: "The application name",
        },
    ]
    },
    SpamSmtpTarpitEvent: {
    description: "These events are created by [[Spam Blocker]] and inserted to the [[Database_Schema#smtp_tarpit_events|smtp_tarpit_events]] table when a session is tarpitted.",
    fields: [
        {
        name: "IPAddr",
        type: "InetAddress",
        description: "The IP address",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vendorName",
        type: "String",
        description: "The application name",
        },
    ]
    },
    ConfigurationBackupEvent: {
    description: "These events are created by [[Configuration Backup]] and inserted to the [[Database_Schema#configuratio_backup_events|configuratio_backup_events]] table when a backup occurs.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "destination",
        type: "String",
        description: "The destination",
        },
        {
        name: "detail",
        type: "String",
        description: "The details",
        },
        {
        name: "success",
        type: "boolean",
        description: "True if successful, false otherwise",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    TunnelStatusEvent: {
    description: "These events are created by [[IPsec VPN]] and inserted to the [[Database_Schema#ipsec_tunnel_stats|ipsec_tunnel_stats]] table periodically.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "inBytes",
        type: "long",
        description: "The number of bytes received from this tunnel",
        },
        {
        name: "outBytes",
        type: "long",
        description: "The number of bytes sent in this tunnel",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "tunnelName",
        type: "String",
        description: "The name of this tunnel",
        },
    ]
    },
    IpsecVpnEvent: {
    description: "These events are created by [[IPsec VPN]] and inserted to the [[Database_Schema#ipsec_vpn_events|ipsec_vpn_events]] table when an IPsec connection event occurs.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "eventType",
        type: "IpsecVpnEvent$EventType",
        description: "The event type",
        values: [ "CONNECT",  "DISCONNECT",  "UNREACHABLE", ],
        },
        {
        name: "localAddress",
        type: "String",
        description: "The local host address",
        },
        {
        name: "remoteAddress",
        type: "String",
        description: "The remote host address",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "tunnelDescription",
        type: "String",
        description: "Description of tunnel",
        },
    ]
    },
    VirtualUserEvent: {
    description: "These events are created by [[IPsec VPN]] and inserted to the [[Database_Schema#ipsec_user_events|ipsec_user_events]] table when a user event occurs.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "clientAddress",
        type: "InetAddress",
        description: "The client address",
        },
        {
        name: "clientProtocol",
        type: "String",
        description: "The client protocol",
        },
        {
        name: "clientUsername",
        type: "String",
        description: "The client username",
        },
        {
        name: "elapsedTime",
        type: "String",
        description: "The elapsed time",
        },
        {
        name: "eventId",
        type: "Long",
        description: "The event ID",
        },
        {
        name: "netInterface",
        type: "String",
        description: "The net interface",
        },
        {
        name: "netProcess",
        type: "String",
        description: "The net process",
        },
        {
        name: "netRXbytes",
        type: "Long",
        description: "The number of RX (received) bytes",
        },
        {
        name: "netTXbytes",
        type: "Long",
        description: "The number of TX (transmitted) bytes",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    SslInspectorLogEvent: {
    description: "These events are created by [[SSL Inspector]] and update the [[Database_Schema#sessions|sessions]] table when a session is processed by SSL Inspector.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "detail",
        type: "String",
        description: "The details",
        },
        {
        name: "ruleId",
        type: "Integer",
        description: "The rule ID",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.tagsString",
        type: "String",
        description: "The string value of all tags",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "status",
        type: "String",
        description: "The status",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    ApplicationControlLiteEvent: {
    description: "These events are created by [[Application Control Lite]] and update the [[Database_Schema#sessions|sessions]] table when application control lite identifies a session.",
    fields: [
        {
        name: "blocked",
        type: "boolean",
        description: "True if blocked, false otherwise",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "protocol",
        type: "String",
        description: "The protocol",
        },
        {
        name: "sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    HttpRequestEvent: {
    description: "These events are created by HTTP subsystem and inserted to the [[Database_Schema#http_events|http_events]] table when a web request happens.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "domain",
        type: "String",
        description: "The domain",
        },
        {
        name: "host",
        type: "String",
        description: "The host",
        },
        {
        name: "method",
        type: "HttpMethod",
        description: "The HTTP method",
        },
        {
        name: "referer",
        type: "String",
        description: "The referer",
        },
        {
        name: "requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "requestUri",
        type: "URI",
        description: "The request URI",
        },
        {
        name: "sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    HttpResponseEvent: {
    description: "These events are created by HTTP subsystem and update the [[Database_Schema#http_events|http_events]] table when a web response happens.",
    fields: [
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "contentType",
        type: "String",
        description: "The content type",
        },
        {
        name: "httpRequestEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "httpRequestEvent.contentLength",
        type: "long",
        description: "The content length",
        },
        {
        name: "httpRequestEvent.domain",
        type: "String",
        description: "The domain",
        },
        {
        name: "httpRequestEvent.host",
        type: "String",
        description: "The host",
        },
        {
        name: "httpRequestEvent.method",
        type: "HttpMethod",
        description: "The HTTP method",
        },
        {
        name: "httpRequestEvent.referer",
        type: "String",
        description: "The referer",
        },
        {
        name: "httpRequestEvent.requestId",
        type: "Long",
        description: "The request ID",
        },
        {
        name: "httpRequestEvent.requestUri",
        type: "URI",
        description: "The request URI",
        },
        {
        name: "httpRequestEvent.sessionEvent.CClientAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) client address",
        },
        {
        name: "httpRequestEvent.sessionEvent.CClientPort",
        type: "Integer",
        description: "The client-side (pre-NAT) client port",
        },
        {
        name: "httpRequestEvent.sessionEvent.CServerAddr",
        type: "InetAddress",
        description: "The client-side (pre-NAT) server address",
        },
        {
        name: "httpRequestEvent.sessionEvent.CServerPort",
        type: "Integer",
        description: "The client-side (pre-NAT) server port",
        },
        {
        name: "httpRequestEvent.sessionEvent.SClientAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) client address",
        },
        {
        name: "httpRequestEvent.sessionEvent.SClientPort",
        type: "Integer",
        description: "The server-side (post-NAT) client port",
        },
        {
        name: "httpRequestEvent.sessionEvent.SServerAddr",
        type: "InetAddress",
        description: "The server-side (post-NAT) server address",
        },
        {
        name: "httpRequestEvent.sessionEvent.SServerPort",
        type: "Integer",
        description: "The server-side (post-NAT) server port",
        },
        {
        name: "httpRequestEvent.sessionEvent.bypassed",
        type: "boolean",
        description: "True if bypassed, false otherwise",
        },
        {
        name: "httpRequestEvent.sessionEvent.class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientCountry",
        type: "String",
        description: "The client country",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientIntf",
        type: "Integer",
        description: "The client interface ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientLatitude",
        type: "Double",
        description: "The client latitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.clientLongitude",
        type: "Double",
        description: "The client longitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.entitled",
        type: "boolean",
        description: "The entitled status",
        },
        {
        name: "httpRequestEvent.sessionEvent.filterPrefix",
        type: "String",
        description: "The filter prefix if blocked by the filter rules",
        },
        {
        name: "httpRequestEvent.sessionEvent.hostname",
        type: "String",
        description: "The hostname",
        },
        {
        name: "httpRequestEvent.sessionEvent.icmpType",
        type: "Short",
        description: "The ICMP type",
        },
        {
        name: "httpRequestEvent.sessionEvent.localAddr",
        type: "InetAddress",
        description: "The local host address",
        },
        {
        name: "httpRequestEvent.sessionEvent.policyId",
        type: "Integer",
        description: "The policy ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.policyRuleId",
        type: "Integer",
        description: "The policy rule ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.protocol",
        type: "Short",
        description: "The protocol",
        },
        {
        name: "httpRequestEvent.sessionEvent.protocolName",
        type: "String",
        description: "The protocol name",
        },
        {
        name: "httpRequestEvent.sessionEvent.remoteAddr",
        type: "InetAddress",
        description: "The remote host address",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverCountry",
        type: "String",
        description: "The server country",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverIntf",
        type: "Integer",
        description: "The server interface ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverLatitude",
        type: "Double",
        description: "The server latitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.serverLongitude",
        type: "Double",
        description: "The server longitude",
        },
        {
        name: "httpRequestEvent.sessionEvent.sessionId",
        type: "Long",
        description: "The session ID",
        },
        {
        name: "httpRequestEvent.sessionEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "httpRequestEvent.sessionEvent.username",
        type: "String",
        description: "The username",
        },
        {
        name: "httpRequestEvent.timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "requestLine",
        type: "RequestLine",
        description: "The request line",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
    ]
    },
    IntrusionPreventionLogEvent: {
    description: "These events are created by [[Intrusion Prevention]] and inserted to the [[Database_Schema#intrusion_prevention_events|intrusion_prevention_events]] table when a rule matches.",
    fields: [
        {
        name: "blocked",
        type: "short",
        description: "1 if blocked, 0 otherwise",
        },
        {
        name: "category",
        type: "String",
        description: "The category",
        },
        {
        name: "class",
        type: "Class",
        description: "The class name",
        },
        {
        name: "classificationId",
        type: "long",
        description: "The classification ID",
        },
        {
        name: "classtype",
        type: "String",
        description: "The classtype",
        },
        {
        name: "dportIcode",
        type: "int",
        description: "The dportIcode",
        },
        {
        name: "eventId",
        type: "long",
        description: "The event ID",
        },
        {
        name: "eventMicrosecond",
        type: "long",
        description: "The event microsecond",
        },
        {
        name: "eventSecond",
        type: "long",
        description: "The event second",
        },
        {
        name: "eventType",
        type: "long",
        description: "The event type",
        },
        {
        name: "generatorId",
        type: "long",
        description: "The generator ID",
        },
        {
        name: "impact",
        type: "short",
        description: "The impact",
        },
        {
        name: "impactFlag",
        type: "short",
        description: "The impact flag",
        },
        {
        name: "ipDestination",
        type: "InetAddress",
        description: "The IP address destination",
        },
        {
        name: "ipSource",
        type: "InetAddress",
        description: "The IP address source",
        },
        {
        name: "mplsLabel",
        type: "long",
        description: "The mplsLabel",
        },
        {
        name: "msg",
        type: "String",
        description: "The msg",
        },
        {
        name: "padding",
        type: "int",
        description: "The padding",
        },
        {
        name: "priorityId",
        type: "long",
        description: "The priority ID",
        },
        {
        name: "protocol",
        type: "short",
        description: "The protocol",
        },
        {
        name: "sensorId",
        type: "long",
        description: "The sensor ID",
        },
        {
        name: "signatureId",
        type: "long",
        description: "The signature ID",
        },
        {
        name: "signatureRevision",
        type: "long",
        description: "The signature revision",
        },
        {
        name: "sportItype",
        type: "int",
        description: "The sportItype",
        },
        {
        name: "timeStamp",
        type: "Timestamp",
        description: "The timestamp",
        },
        {
        name: "vlanId",
        type: "int",
        description: "The VLAN Id",
        },
    ]
    },
}
