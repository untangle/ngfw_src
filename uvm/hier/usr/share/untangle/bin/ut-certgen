#!/bin/dash

OPENSSL_CONF="@PREFIX@/usr/share/untangle/conf/ut-openssl.cnf"
OPENSSL_TOOL="/usr/bin/openssl"
CERT_PATH="/var/cache/untangle-ssl"
TEMP="/dev/shm"

UT_ROOT_PATH="@PREFIX@/usr/share/untangle/settings/untangle-certificates"

# Start with the current epoch time
# Subtract one day to avoid not-yet-valid errors from minor clock differences
# Put the adjusted date in YYMMDDHHMMSSZ format required by openssl
CURRDATE=`date +%s`
PREVDATE=$(($CURRDATE-86400))
CERTDATE=`date --date=@$PREVDATE +%y%m%d%H%M%S`'Z'

# Since we call this script to generate mitm certificates on the fly we must
# use a random source that will not block.  All the security articles I found
# indicate /dev/urandom has plenty of entropy given what we're doing here.
RANDFILE="/dev/urandom"

show_usage()
{
echo " "
echo "  USAGE: ut-certgen certfile subject [ alternates ]"
echo " "
echo "  certfile = www.domain.com"
echo "  subject = /C=US/ST=California/L=Sunnyvale/O=Untangle/OU=Security/CN=www.domain.com"
echo "  alternates = DNS:ftp.domain.com,DNS:mail.domain.com"
echo " "
}

# First argument should be the destination filename for the new cert.  Since
# the origin cert CN might include a wildcard, the Java code will first
# convert the filename to all lower case and the replace any *'s with X's
if [ -z "$1" ]; then
    show_usage
    exit 1
fi

# Second argument should be the subject field for the generated certificate
if [ -z "$2" ]; then
    show_usage
    exit 2
fi

# Third argument is the optional string to be placed in the certificate
# subjectAlternativeName field.  When provided, we use a special CA section
# in the openssl.conf file that will include the list in the generated
# certificate.  When absent, we use a different CA section without the
# extension.  We have to define something in both cases since openssl will
# throw an error trying to read an empty environment variable even for
# config sections that aren't actually used.
if [ ! -z "$3" -a "$3" != "" ]; then
    UT_EXT_MODE="req_ext_san"
    UT_SAN_LIST="$3"
elif grep -qE '^9\.' /etc/debian_version ; then
    # NGFW-11179: on Stretch, openssl errors out when reading the
    # empty [req_ext_nil] section of ut-openssl.cnf. Trying to
    # populate that section with some unimportant variable fixes the
    # ut-certgen run, but it unfortunately also makes the ut-rootgen
    # one fail. At this point the easiest solution is to always add a
    # DNS:$(hostname) subjectAlternativeName.
    # To make sure this doesn't have an impact on 13.2 itself, we
    # isolate this fix to Stretch-based installs only.
    UT_EXT_MODE="req_ext_san"
    UT_SAN_LIST="DNS:$(hostname)"
else
    UT_EXT_MODE="req_ext_nil"
    UT_SAN_LIST="empty"
fi

# export all environment variables referenced in our openssl config file
export UT_ROOT_PATH
export UT_EXT_MODE
export UT_SAN_LIST
export RANDFILE

# if either of the root certificate files are missing we bail
if [ ! -r $UT_ROOT_PATH/untangle.key -o ! -r $UT_ROOT_PATH/untangle.crt ]; then
    echo "Unable to locate the root certificate authority files"
    exit 3
fi

# if the serial.txt file doesn't exist or is empty we create it now
if [ ! -s $UT_ROOT_PATH/serial.txt ]; then
    date +%s000000 > $UT_ROOT_PATH/serial.txt
fi

# if the index.txt file doesn't exist we create it now
if [ ! -r $UT_ROOT_PATH/index.txt ]; then
    touch $UT_ROOT_PATH/index.txt
fi

# make sure the destination path for certificates exists
if [ ! -r $CERT_PATH ]; then
    mkdir -p $CERT_PATH
fi

SERIAL=`cat $UT_ROOT_PATH/serial.txt`

case $1 in
    REQUEST)
    # Here we generate a new CSR for this server to be signed by a third party
    # using the existing private key file that was previously created
    # when the original Apache server certificate was generated
        $OPENSSL_TOOL req -batch -nodes -config $OPENSSL_CONF -extensions v3_cert -new -key $UT_ROOT_PATH/apache.key -out $UT_ROOT_PATH/request.csr -subj "$2"
        if [ $? != 0 ]; then
            echo "REQUEST: Error generating certificate signing request"
            exit 4
        fi
    ;;
    APACHE)
    # When making the initial Apache server certificate we generate a new CSR
    # and sign it with our CA.  We hang onto the original separate KEY and CRT
    # files so the private key can later be used if they decide to
    # generate a CSR for this server, and we also combine them to make
    # the PEM file that we copy into the Apache directory.  Finally we create
    # the PFX file that can be loaded by apps using the SSLEngine stuff.
        $OPENSSL_TOOL req -batch -nodes -config $OPENSSL_CONF -extensions v3_host -newkey rsa:2048 -keyout $UT_ROOT_PATH/apache.key -out $UT_ROOT_PATH/apache.csr -subj "$2"
        if [ $? != 0 ]; then
            echo "APACHE: Error generating certificate signing request"
            exit 5
        fi
        $OPENSSL_TOOL ca -batch -config $OPENSSL_CONF -extensions v3_host -startdate $CERTDATE -days 820 -out $TEMP/server.crt -outdir $TEMP -infiles $UT_ROOT_PATH/apache.csr
        if [ $? != 0 ]; then
            echo "APACHE: Error generating signed certificate"
            exit 6
        fi
        grep -A 1000 BEGIN $TEMP/server.crt > $UT_ROOT_PATH/apache.crt
        cat $UT_ROOT_PATH/apache.crt $UT_ROOT_PATH/apache.key > $UT_ROOT_PATH/apache.pem
        $OPENSSL_TOOL pkcs12 -export -passout pass:password -name default -in $UT_ROOT_PATH/apache.crt -inkey $UT_ROOT_PATH/apache.key -out $UT_ROOT_PATH/apache.pfx
        if [ $? != 0 ]; then
            echo "APACHE: Error creating PKCS12 certificate file"
            exit 7
        fi
    ;;
    SERVER)
    # Server certificates are handled just like the default APACHE cert but we
    # put everything into files using the base filename passed to the script
        $OPENSSL_TOOL req -batch -nodes -config $OPENSSL_CONF -extensions v3_host -newkey rsa:2048 -keyout $UT_ROOT_PATH/$4.key -out $UT_ROOT_PATH/$4.csr -subj "$2"
        if [ $? != 0 ]; then
            echo "SERVER: Error generating certificate signing request"
            exit 8
        fi
        $OPENSSL_TOOL ca -batch -config $OPENSSL_CONF -extensions v3_host -startdate $CERTDATE -days 820 -out $TEMP/server.crt -outdir $TEMP -infiles $UT_ROOT_PATH/$4.csr
        if [ $? != 0 ]; then
            echo "SERVER: Error generating signed certificate"
            exit 9
        fi
        grep -A 1000 BEGIN $TEMP/server.crt > $UT_ROOT_PATH/$4.crt
        cat $UT_ROOT_PATH/$4.crt $UT_ROOT_PATH/$4.key > $UT_ROOT_PATH/$4.pem
        $OPENSSL_TOOL pkcs12 -export -passout pass:password -name default -in $UT_ROOT_PATH/$4.crt -inkey $UT_ROOT_PATH/$4.key -out $UT_ROOT_PATH/$4.pfx
        if [ $? != 0 ]; then
            echo "SERVER: Error creating PKCS12 certificate file"
            exit 10
        fi
    ;;
    *)
    # In all other cases we are making a fake MITM certificate so we generate
    # a new CSR and sign it with our CA and put the server key and signed
    # cert into a PKCS12 file that can be loaded by the Java code
        $OPENSSL_TOOL req -batch -nodes -config $OPENSSL_CONF -extensions v3_fake -newkey rsa:2048 -keyout $TEMP/server.key -out $TEMP/server.csr -subj "$2"
        if [ $? != 0 ]; then
            echo "MITM: Error generating certificate signing request"
            exit 11
        fi
        $OPENSSL_TOOL ca -batch -config $OPENSSL_CONF -extensions v3_fake -startdate $CERTDATE -days 820 -out $TEMP/server.crt -outdir $TEMP -infiles $TEMP/server.csr
        if [ $? != 0 ]; then
            echo "MITM: Error generating signed certificate"
            exit 12
        fi
        $OPENSSL_TOOL pkcs12 -export -passout pass:password -name default -in $TEMP/server.crt -inkey $TEMP/server.key -out $CERT_PATH/$1
        if [ $? != 0 ]; then
            echo "MITM: Error creating PKCS12 certificate file"
            exit 13
        fi
    ;;
esac

# Cleanup any working files we created
rm -f $TEMP/server.key
rm -f $TEMP/server.csr
rm -f $TEMP/server.crt
rm -f $TEMP/$SERIAL.pem
exit 0
