import os, platform

#global max_heap_size
#global gc_safety_factor
#global gc_min_cycle

# the next values will be overridden by untangle-hw
max_heap_size="320m"
gc_safety_factor="90"
gc_min_cycle="10"
session_limit="10000"
reports_max_queue_len="1000000"
num_netcap_threads="25"

# load the hardware specific settings
if os.path.exists("/usr/share/untangle/conf/untangle-hw.conf"):
   exec(open("/usr/share/untangle/conf/untangle-hw.conf").read());
if os.path.exists("@PREFIX@/usr/share/untangle/conf/untangle-hw.conf"):
   exec(open("@PREFIX@/usr/share/untangle/conf/untangle-hw.conf").read());    

# #
# # untangle-vm configuration
# #
uvm_args=""

uvm_logdir = "/var/log/uvm/"
uvm_rundir = "/var/run"
uvm_console_log  = uvm_logdir + "console.log"
uvm_wrapper_log  = uvm_logdir + "wrapper.log"
uvm_uvm_log      = uvm_logdir + "uvm.log"
uvm_gc_log       = uvm_logdir + "gc.log"
uvm_packages_log = uvm_logdir + "packages.log"
uvm_cmd = "/usr/bin/uvm"
uvm_user = "root"

uvm_args += " -Dprefix=@PREFIX@"

uvm_args += " -Djava.library.path=@PREFIX@/usr/lib/uvm"

## Set a session limit
if int(num_netcap_threads) > 0:
   uvm_args += " -Dnetcap.numthreads=%s" % num_netcap_threads
if int(session_limit) > 0:
   uvm_args += " -Dnetcap.sessionlimit=%s" % session_limit 

uvm_args += " -Dreports.max_queue_len=%s" % reports_max_queue_len 

## Set debug levels
#uvm_args += " -Dnetcap.debug.netcap=1" 
#uvm_args += " -Dnetcap.debug.jnetcap=1" 
#uvm_args += " -Dnetcap.debug.vector=1" 
#uvm_args += " -Dnetcap.debug.jvector=1" 
#uvm_args += " -Dnetcap.debug.mvutil=1" 

## Reduce DNS caching to minimal (30 seconds).  
uvm_args += " -Dnetworkaddress.cache.ttl=30 -Dsun.net.inetaddr.ttl=30 -Dnetworkaddress.cache.negative.ttl=10"

## Prefer IPv4 (fixes IPv6 DNS crash - ticket #24827)
uvm_args += " -Djava.net.preferIPv4Stack=true"

## Alternative store
#uvm_args += " -Duvm.store.url=https://develop.untangle.com/api/v1"

## Alternative cmd
#uvm_args += " -Duvm.cmd.url=https://develop.untangle.com/cmd"

## Alternative license server
#uvm_args += " -Duvm.license.url=http://staging-license.untangle.com/license.php"

## Enable TCP splice optimization
#uvm_args += " -Duvm.tcp.splice=1"

## if devel
if not "x" == "x@PREFIX@":  
   uvm_args += " -Dcom.untangle.isDevel=true" 


#
# JAVA configuration
#
java_opts=""

## Debugging (JDB)
#java_opts += " -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:1337"


## Max Heap Size
java_opts += " -Xmx%s" % max_heap_size

## Min Heap Size
java_opts += " -Xms32m"

## Stack size
if platform.machine() == 'x86_64':
    java_opts += " -Xss228k"
elif platform.machine() == 'i686':
    java_opts += " -Xss128k"
elif platform.machine().startswith('arm') or platform.machine() == 'aarch64':
    java_opts += " -Xss256k"
else:
    java_opts += " -Xss128k"

## Discourage JVM signal usage
# java_opts += " -Xrs"

## Direct Memory (we do not use it)
# java_opts += " -XX:MaxDirectMemorySize=32m"

## Disable stat tracking (http://www.evanjones.ca/jvm-mmap-pause.html)
# Comment this line out to use VisualVM
java_opts += " -XX:+PerfDisableSharedMem"

## Concurrent Garbage collector
# java_opts += " -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:CMSIncrementalDutyCycleMin=%s -XX:CMSIncrementalDutyCycle=50 -XX:CMSIncrementalSafetyFactor=%s" % (gc_min_cycle, gc_safety_factor)

## G1 Garbage collector
java_opts += " -XX:+UseG1GC -XX:MaxHeapFreeRatio=30 -XX:MinHeapFreeRatio=20 -XX:InitiatingHeapOccupancyPercent=30"

## Garbage collector logging
if not os.path.exists("@PREFIX@/usr/share/untangle/conf/diskless-mode-flag"):
    java_opts += " -Xlog:gc*,gc+heap=debug:file=%s:time,tags -verbose:gc" % uvm_gc_log

## Server mode (optimizes code at startup)
# -server causes some SIGILL crashes on armhf, disabled on armel and armhf
if not platform.machine().startswith('arm'):
    java_opts += " -server"

## If devel - enable assertions
if not "x" == "x@PREFIX@":  
    java_opts += " -ea"

## Fixes NGFW-14018 -- sun.util.calendar not exported from java.base
java_opts += " --add-exports java.base/sun.util.calendar=ALL-UNNAMED "   

## Disable ldap end point identifcation for AD queries
java_opts += " -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true"
## Need to pad the internal string for the LdapPoolManager to parse.  Otherwise,
## inexplicably (python's execv?), quotes are included and the parser it sees the tokens
## "'plain" and "ssl'" instead of "plain" and "ssl" and fails to open pool for either.
java_opts += " -Dcom.sun.jndi.ldap.connect.pool.protocol=' plain ssl '"

## Enable to debug ldap pool in console log
#java_opts += " -Dcom.sun.jndi.ldap.connect.pool.debug=fine"
#java_opts += " -Dcom.sun.jndi.ldap.connect.pool.debug=all"

java_opts += " -Dcom.sun.jndi.ldap.connect.pool.timeout=30000"
