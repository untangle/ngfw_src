#!/usr/bin/python3.5
"""
Get signature updates
"""
import sys
import getopt
import os
import re
import shutil
import tarfile
import requests
# import urllib3
# import urllib3.PoolManager()

UNTANGLE_DIR = '%s/usr/lib/python%d.%d' % ("@PREFIX@", sys.version_info[0], sys.version_info[1])
if "@PREFIX@" != '':
    sys.path.insert(0, UNTANGLE_DIR)
    sys.path.insert(0, UNTANGLE_DIR + "/dist-packages")
#pylint: disable=wrong-import-position
from uvm import Manager
from uvm import AppManager
from uvm import Uvm
import intrusion_prevention
#pylint: disable=wrong-import-position

DEBUG = False
CHUNK_SIZE = 1024 * 1024
FORCE_SYNC = False

class Update:
    """
    Update
    """
    DEBUG = False
    errors = []
    settings_file_name_regex = re.compile(r'^settings_(\d+).js$')

    def __init__(self, base_directory, url):
        self.debug = DEBUG
        self.base_directory = base_directory
        self.working_directory = self.base_directory + "/update"
        self.signatures_working_directory = self.working_directory + "/new"
        self.url = url
        self.signatures_file_name = self.url.split("/")[-1].split("?")[0]
        self.url_file_name = self.working_directory + "/" + self.signatures_file_name
        self.live_signatures_file_name = self.base_directory + "/" + self.signatures_file_name
        self.app_ids = []
        self.app_manager = None

    def setup(self):
        """
        Setup working directory
        """
        if self.debug is True:
            print(":".join([self.__class__.__name__, sys._getframe().f_code.co_name, "cleanup and create work directories"]))

        if os.path.isdir(self.working_directory) is True:
            try:
                shutil.rmtree(self.working_directory)
            except:
                self.errors.append({
                    'msg': "Cannot remove existing working directory=" + self.working_directory,
                    'error': "\n".join(str(v) for v in sys.exc_info())
                })
                return False

        try:
            os.makedirs(self.working_directory)
        except:
            self.errors.append({
                'msg': "Cannot create working directory=" + self.working_directory,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        uvm_context = Uvm().getUvmContext(hostname="localhost", username=None, password=None, timeout=60)
        self.app_manager = uvm_context.appManager()

        ##
        ## Easier to parse the api for instances than reproducing what
        ## it does with object.
        ##
        for instance in AppManager(uvm_context).get_instances():
            if instance[1] == "intrusion-prevention" and (instance[3] == "RUNNING" or FORCE_SYNC):
                self.app_ids.append(instance[0])

        return True

    def download(self):
        """
        Download
        """
        if self.debug is True:
            print(":".join([self.__class__.__name__, sys._getframe().f_code.co_name, "get signature set"]))

        ## Get file size to determine if we need to download
        if os.path.isfile(self.live_signatures_file_name) is True:
            live_signatures_file_size = os.path.getsize(self.live_signatures_file_name)
        else:
            live_signatures_file_size = 0

        request = None
        try:
            request = requests.get(self.url)
        except:
            self.errors.append({
                'msg': "Cannot open url=" + self.url,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        url_file_size = int(request.headers['content-length'])
        if url_file_size == 0:
            self.errors.append({
                'msg': "Content length",
                'error': "Content length is 0"
            })
            return False

        if live_signatures_file_size == url_file_size:
            if self.debug:
                print(":".join([self.__class__.__name__, sys._getframe().f_code.co_name, "live and url sizes are the same=" + str(live_signatures_file_size)]))
            return False

        try:
            url = requests.get(self.url)
        except:
            self.errors.append({
                'msg': "Cannot open url=" + self.url,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        try:
            write_file = open(self.url_file_name, 'wb')
        except:
            self.errors.append({
                'msg': "Cannot create url_file_name=" + self.url_file_name,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        try:
            for chunk in url.iter_content(chunk_size=CHUNK_SIZE):
                if chunk:
                    write_file.write(chunk)
        except:
            self.errors.append({
                'msg': "Cannot write to url_file_name=" + self.url_file_name,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        write_file.close()
        return True

    def validate(self):
        """
        Validate
        """
        if self.debug is True:
            print(":".join([self.__class__.__name__, sys._getframe().f_code.co_name, "extract signatures"]))

        try:
            tar = tarfile.open(self.url_file_name)
            tar.extractall(path=self.signatures_working_directory)
            tar.close()
        except:
            self.errors.append({
                'msg': "Unable to extract downloaded file=" + self.url_file_name + " to signatures working directory=" + self.signatures_working_directory,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        return True

    def install(self):
        """
        Install to live
        """
        if self.debug is True:
            print(":".join([self.__class__.__name__, sys._getframe().f_code.co_name, "move to live"]))

        live_new_directory = self.base_directory + "/new"
        live_previous_directory = self.base_directory + "/previous"
        live_current_directory = self.base_directory + "/current"

        ## Copy to live directory as "new"
        if os.path.isdir(live_new_directory) is True:
            try:
                shutil.rmtree(live_new_directory)
            except:
                self.errors.append({
                    'msg': "Cannot remove existing live new directory=" + live_new_directory,
                    'error': "\n".join(str(v) for v in sys.exc_info())
                })
                return False

        try:
            shutil.copytree(self.signatures_working_directory, live_new_directory)
        except:
            self.errors.append({
                'msg': "Unable to copy tree from working directory " + self.signatures_working_directory + " to live directory " + live_new_directory,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        ## remove previous
        if os.path.isdir(live_previous_directory) is True:
            try:
                shutil.rmtree(live_previous_directory)
            except:
                self.errors.append({
                    'msg': "Cannot remove existing live previous directory=" + live_previous_directory,
                    'error': "\n".join(str(v) for v in sys.exc_info())
                })
                return False

        ## rename current to previous
        if os.path.isdir(live_current_directory) is True:
            try:
                shutil.move(live_current_directory, live_previous_directory)
            except:
                self.errors.append({
                    'msg': "Cannot rename existing current directory " + live_current_directory + " to previous " + live_previous_directory,
                    'error': "\n".join(str(v) for v in sys.exc_info())
                })
                return False

        ## rename current.new to current
        try:
            shutil.move(live_new_directory, live_current_directory)
        except:
            self.errors.append({
                'msg': "Cannot rename existing new directory " + live_new_directory + " to currret " + live_current_directory,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        # move tarball to live
        if os.path.isfile(self.live_signatures_file_name) is True:
            try:
                os.remove(self.live_signatures_file_name)
            except:
                self.errors.append({
                    'msg': "Cannot remove existing live signatures file=" + self.live_signatures_file_name,
                    'error': "\n".join(str(v) for v in sys.exc_info())
                })
                return False

        try:
            shutil.copyfile(self.url_file_name, self.live_signatures_file_name)
        except:
            self.errors.append({
                'msg': "Cannot copy new signatures file " + self.url_file_name + " to live " + self.live_signatures_file_name,
                'error': "\n".join(str(v) for v in sys.exc_info())
            })
            return False

        return True

    def synchronize(self):
        """
        Synchronize configuration
        """
        for app_id in self.app_ids:
            app = self.app_manager.app(app_id)
            changed = False

            changed = app.synchronizeSettingsWithDefaults() or changed
            changed = app.synchronizeSettingsWithClassifications() or changed
            changed = app.synchronizeSettingsWithVariables() or changed

            if changed:
                app.setSettings(app.getSettings())

        return True

def usage():
    """
    Usage
    """
    print("usage")
    print("help\t\tusage")
    print("signatures_template_directory\t\tSuricata signature template directory")

def main(argv):
    """
    Main
    """
    global DEBUG
    global FORCE_SYNC
    signatures_template_directory = "/usr/share/untangle-suricata-config"
    url = "https://ids.untangle.com/suricatasignatures.tar.gz"
    update_ran_file_name = "/tmp/intrusion-prevention-update.ran"
    force_download = False

    try:
        opts, args = getopt.getopt(argv, "hru:d", ["help", "signatures_template_directory=", "url=", "force_sync", "debug", "force_download"] )
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-d", "--debug"):
            DEBUG = True
        elif opt in ("-s", "--force_sync"):
            FORCE_SYNC = True
        elif opt in ("-s", "--force_download"):
            force_download = True
        elif opt in ("-r", "--signatures_template_directory"):
            signatures_template_directory = arg
        elif opt in ("-u", "--url"):
            url = arg

    if DEBUG is True:
        print("signatures_template_directory = " + signatures_template_directory)
        print("url = " + url)

    update = Update(signatures_template_directory, url)
    update.setup()
    if FORCE_SYNC is True:
        update.synchronize()
    else:
        if (force_download or update.app_ids) and update.download() is True and update.validate() and update.install():
            update.synchronize()

    """
    Always update last updated time even if nothing was downloaded 
    (suricata signatures aren't updated every day)
    Otherwise customers will call to complain.
    """
    if os.path.exists(update_ran_file_name):
        os.utime(update_ran_file_name, None)
    else:
        update_ran_file = open(update_ran_file_name, "a")
        update_ran_file.close()

    if update.errors:
        print(update.errors)
    sys.exit()

if __name__ == "__main__":
    main(sys.argv[1:])
